// <auto-generated />
using System;
using ICABAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;

namespace ICABAPI.Migrations
{
    [DbContext(typeof(ModelContext))]
    partial class ModelContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ICAB")
                .HasAnnotation("Relational:Collation", "USING_NLS_COMP")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

            modelBuilder.HasSequence("EXAM_CHANGE_ID");

            modelBuilder.HasSequence("SEQ_EXAM_REGNO");

            modelBuilder.HasSequence("SQ_SAMPLECLASS");

            modelBuilder.HasSequence("SQ_TblStudent");

            modelBuilder.HasSequence("SQ_TblUnknown");

            modelBuilder.HasSequence("STUDENT_SLNO");

            modelBuilder.HasSequence("STUREG_CHANGE_ID");

            modelBuilder.HasSequence("TRACK_ID");

            modelBuilder.Entity("ICABAPI.Models.AdminDecoder", b =>
                {
                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("DATE")
                        .HasColumnName("CREATE_DATE");

                    b.Property<string>("Entryuser")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("ENTRYUSER");

                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<string>("Fullname")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("FULLNAME");

                    b.Property<byte?>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("PASSWORD");

                    b.Property<byte?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<byte?>("UserId")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("USER_ID");

                    b.Property<string>("UserStatus")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("USER_STATUS");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("USERNAME");

                    b.Property<string>("Who")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("WHO");

                    b.ToTable("ADMIN_DECODER");
                });

            modelBuilder.Entity("ICABAPI.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CplVerification")
                        .HasColumnType("NUMBER(1)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasPrecision(7)
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("Email")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<bool>("IsVerified")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int>("Otp")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("RAW(2000)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("RAW(2000)");

                    b.Property<int>("RegistrationNo")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("UserName")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("Id");

                    b.ToTable("APPUSER");
                });

            modelBuilder.Entity("ICABAPI.Models.Appallsub", b =>
                {
                    b.ToView("APPALLSUB");
                });

            modelBuilder.Entity("ICABAPI.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("FullName")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("NUMBER(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TIMESTAMP(7) WITH TIME ZONE");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("TokenValue")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("\"NormalizedUserName\" IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ICABAPI.Models.Bankbranch", b =>
                {
                    b.Property<decimal?>("Branchcode")
                        .HasColumnType("NUMBER")
                        .HasColumnName("BRANCHCODE");

                    b.Property<decimal?>("Chequebankcode")
                        .HasColumnType("NUMBER")
                        .HasColumnName("CHEQUEBANKCODE");

                    b.Property<string>("Branchname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("BRANCHNAME");

                    b.Property<string>("Chequebankname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("CHEQUEBANKNAME");

                    b.Property<string>("Routing")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("ROUTING");

                    b.Property<string>("Swiftcode")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(30)")
                        .HasColumnName("SWIFTCODE");

                    b.HasKey("Branchcode", "Chequebankcode");

                    b.ToTable("BANKBRANCH");
                });

            modelBuilder.Entity("ICABAPI.Models.BarCodeAllot_Archieve", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BarCode")
                        .HasColumnType("NUMBER(10)");

                    b.Property<DateTime>("CHANGEDATE")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("CHANGETIME")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("CHANGEUSER")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("EVENT")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int?>("ExamLevel")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("ExamRollno")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("MonthId")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("PCINFO")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int?>("RegNo")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("SessionYear")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("SubId")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("TRACKID")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("UdSlno")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("UserId")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("ID");

                    b.ToTable("BARCODEALLOTARCHIEVE");
                });

            modelBuilder.Entity("ICABAPI.Models.Barcheck1", b =>
                {
                    b.Property<long?>("Bar11")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR11");

                    b.Property<long?>("Bar12")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR12");

                    b.Property<long?>("Bar13")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR13");

                    b.Property<long?>("Bar14")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR14");

                    b.Property<long?>("Bar15")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR15");

                    b.Property<long?>("Bar16")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR16");

                    b.Property<long?>("Bar17")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR17");

                    b.Property<long?>("Bar18")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR18");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<decimal?>("Exm11")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM11");

                    b.Property<decimal?>("Exm12")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM12");

                    b.Property<decimal?>("Exm13")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM13");

                    b.Property<decimal?>("Exm14")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM14");

                    b.Property<decimal?>("Exm15")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM15");

                    b.Property<decimal?>("Exm16")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM16");

                    b.Property<decimal?>("Exm17")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM17");

                    b.Property<decimal?>("Exm18")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM18");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.ToTable("BARCHECK_1");
                });

            modelBuilder.Entity("ICABAPI.Models.Barcheck2", b =>
                {
                    b.Property<long?>("Bar21")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR21");

                    b.Property<long?>("Bar22")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR22");

                    b.Property<long?>("Bar23")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR23");

                    b.Property<long?>("Bar24")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR24");

                    b.Property<long?>("Bar25")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR25");

                    b.Property<long?>("Bar26")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR26");

                    b.Property<long?>("Bar27")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR27");

                    b.Property<long?>("Bar28")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR28");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<decimal?>("Exm21")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM21");

                    b.Property<decimal?>("Exm22")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM22");

                    b.Property<decimal?>("Exm23")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM23");

                    b.Property<decimal?>("Exm24")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM24");

                    b.Property<decimal?>("Exm25")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM25");

                    b.Property<decimal?>("Exm26")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM26");

                    b.Property<decimal?>("Exm27")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM27");

                    b.Property<decimal?>("Exm28")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM28");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.ToTable("BARCHECK_2");
                });

            modelBuilder.Entity("ICABAPI.Models.Barcheck3", b =>
                {
                    b.Property<long?>("Bar31")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR31");

                    b.Property<long?>("Bar32")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR32");

                    b.Property<long?>("Bar33")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR33");

                    b.Property<long?>("Bar34")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR34");

                    b.Property<long?>("Bar35")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR35");

                    b.Property<long?>("Bar36")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR36");

                    b.Property<long?>("Bar37")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR37");

                    b.Property<long?>("Bar38")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR38");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<decimal?>("Exm31")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM31");

                    b.Property<decimal?>("Exm32")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM32");

                    b.Property<decimal?>("Exm33")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM33");

                    b.Property<decimal?>("Exm34")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM34");

                    b.Property<decimal?>("Exm35")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM35");

                    b.Property<decimal?>("Exm36")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM36");

                    b.Property<decimal?>("Exm37")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM37");

                    b.Property<decimal?>("Exm38")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM38");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.ToTable("BARCHECK_3");
                });

            modelBuilder.Entity("ICABAPI.Models.Barcheck41", b =>
                {
                    b.Property<long?>("Bar411")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR411");

                    b.Property<long?>("Bar412")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR412");

                    b.Property<long?>("Bar413")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR413");

                    b.Property<long?>("Bar414")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR414");

                    b.Property<long?>("Bar415")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR415");

                    b.Property<long?>("Bar416")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR416");

                    b.Property<long?>("Bar417")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR417");

                    b.Property<long?>("Bar418")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR418");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<decimal?>("Exm411")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM411");

                    b.Property<decimal?>("Exm412")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM412");

                    b.Property<decimal?>("Exm413")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM413");

                    b.Property<decimal?>("Exm414")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM414");

                    b.Property<decimal?>("Exm415")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM415");

                    b.Property<decimal?>("Exm416")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM416");

                    b.Property<decimal?>("Exm417")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM417");

                    b.Property<decimal?>("Exm418")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM418");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.ToTable("BARCHECK_41");
                });

            modelBuilder.Entity("ICABAPI.Models.Barcheck42", b =>
                {
                    b.Property<long?>("Bar421")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR421");

                    b.Property<long?>("Bar422")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR422");

                    b.Property<long?>("Bar423")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR423");

                    b.Property<long?>("Bar424")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR424");

                    b.Property<long?>("Bar425")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR425");

                    b.Property<long?>("Bar426")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR426");

                    b.Property<long?>("Bar427")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR427");

                    b.Property<long?>("Bar428")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR428");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<decimal?>("Exm421")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM421");

                    b.Property<decimal?>("Exm422")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM422");

                    b.Property<decimal?>("Exm423")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM423");

                    b.Property<decimal?>("Exm424")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM424");

                    b.Property<decimal?>("Exm425")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM425");

                    b.Property<decimal?>("Exm426")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM426");

                    b.Property<decimal?>("Exm427")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM427");

                    b.Property<decimal?>("Exm428")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM428");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.ToTable("BARCHECK_42");
                });

            modelBuilder.Entity("ICABAPI.Models.Barcheck51", b =>
                {
                    b.Property<long?>("Bar511")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR511");

                    b.Property<long?>("Bar512")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR512");

                    b.Property<long?>("Bar513")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR513");

                    b.Property<long?>("Bar514")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR514");

                    b.Property<long?>("Bar515")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR515");

                    b.Property<long?>("Bar516")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR516");

                    b.Property<long?>("Bar517")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR517");

                    b.Property<long?>("Bar518")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR518");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<decimal?>("Exm511")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM511");

                    b.Property<decimal?>("Exm512")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM512");

                    b.Property<decimal?>("Exm513")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM513");

                    b.Property<decimal?>("Exm514")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM514");

                    b.Property<decimal?>("Exm515")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM515");

                    b.Property<decimal?>("Exm516")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM516");

                    b.Property<decimal?>("Exm517")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM517");

                    b.Property<decimal?>("Exm518")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM518");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.ToTable("BARCHECK_51");
                });

            modelBuilder.Entity("ICABAPI.Models.Barcheck52", b =>
                {
                    b.Property<long?>("Bar521")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR521");

                    b.Property<long?>("Bar522")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR522");

                    b.Property<long?>("Bar523")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR523");

                    b.Property<long?>("Bar524")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR524");

                    b.Property<long?>("Bar525")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR525");

                    b.Property<long?>("Bar526")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR526");

                    b.Property<long?>("Bar527")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR527");

                    b.Property<long?>("Bar528")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR528");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<decimal?>("Exm521")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM521");

                    b.Property<decimal?>("Exm522")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM522");

                    b.Property<decimal?>("Exm523")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM523");

                    b.Property<decimal?>("Exm524")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM524");

                    b.Property<decimal?>("Exm525")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM525");

                    b.Property<decimal?>("Exm526")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM526");

                    b.Property<decimal?>("Exm527")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM527");

                    b.Property<decimal?>("Exm528")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("EXM528");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.ToTable("BARCHECK_52");
                });

            modelBuilder.Entity("ICABAPI.Models.Barcheck61", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("Bar611")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR611");

                    b.Property<long?>("Bar612")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR612");

                    b.Property<long?>("Bar613")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR613");

                    b.Property<long?>("Bar614")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR614");

                    b.Property<long?>("Bar615")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR615");

                    b.Property<long?>("Bar616")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR616");

                    b.Property<long?>("Bar617")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR617");

                    b.Property<long?>("Bar618")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR618");

                    b.Property<string>("Erp611")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Erp612")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Erp613")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Erp614")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Erp615")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Erp616")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Erp617")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Erp618")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<string>("Exm611")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("EXM611");

                    b.Property<string>("Exm612")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("EXM612");

                    b.Property<string>("Exm613")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("EXM613");

                    b.Property<string>("Exm614")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("EXM614");

                    b.Property<string>("Exm615")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("EXM615");

                    b.Property<string>("Exm616")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("EXM616");

                    b.Property<string>("Exm617")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("EXM617");

                    b.Property<string>("Exm618")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("EXM618");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<string>("Test")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("Id");

                    b.ToTable("BARCHECK_61");
                });

            modelBuilder.Entity("ICABAPI.Models.Barcheck62", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("Bar621")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("BAR621");

                    b.Property<long?>("Bar622")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("BAR622");

                    b.Property<long?>("Bar623")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("BAR623");

                    b.Property<long?>("Bar624")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("BAR624");

                    b.Property<long?>("Bar625")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("BAR625");

                    b.Property<long?>("Bar626")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("BAR626");

                    b.Property<long?>("Bar627")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("BAR627");

                    b.Property<long?>("Bar628")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("BAR628");

                    b.Property<string>("Erp621")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Erp622")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Erp623")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Erp624")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Erp625")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Erp626")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Erp627")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Erp628")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<string>("Exm621")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("EXM621");

                    b.Property<string>("Exm622")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("EXM622");

                    b.Property<string>("Exm623")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("EXM623");

                    b.Property<string>("Exm624")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("EXM624");

                    b.Property<string>("Exm625")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("EXM625");

                    b.Property<string>("Exm626")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("EXM626");

                    b.Property<string>("Exm627")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("EXM627");

                    b.Property<string>("Exm628")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("EXM628");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<string>("Test")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("Id");

                    b.ToTable("BARCHECK_62");
                });

            modelBuilder.Entity("ICABAPI.Models.Barcheck63", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("Bar631")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR631");

                    b.Property<long?>("Bar632")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR632");

                    b.Property<long?>("Bar633")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR633");

                    b.Property<long?>("Bar634")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR634");

                    b.Property<long?>("Bar635")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR635");

                    b.Property<long?>("Bar636")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR636");

                    b.Property<long?>("Bar637")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR637");

                    b.Property<long?>("Bar638")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR638");

                    b.Property<string>("Erp631")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Erp632")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Erp633")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("ERP633");

                    b.Property<string>("Erp634")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Erp635")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Erp636")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Erp637")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Erp638")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<string>("Exm631")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("EXM631");

                    b.Property<string>("Exm632")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("EXM632");

                    b.Property<string>("Exm633")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("EXM633");

                    b.Property<string>("Exm634")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("EXM634");

                    b.Property<string>("Exm635")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("EXM635");

                    b.Property<string>("Exm636")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("EXM636");

                    b.Property<string>("Exm637")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("EXM637");

                    b.Property<string>("Exm638")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("EXM638");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.HasKey("Id");

                    b.ToTable("BARCHECK_63");
                });

            modelBuilder.Entity("ICABAPI.Models.BarcodeAllot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BarCode")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR_CODE");

                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<int?>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<int?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<int?>("SubId")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("SUB_ID");

                    b.Property<int?>("UdSlno")
                        .HasPrecision(6)
                        .HasColumnType("NUMBER(6)")
                        .HasColumnName("UD_SLNO");

                    b.Property<string>("UserId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(20)")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.ToTable("BARCODE_ALLOT");
                });

            modelBuilder.Entity("ICABAPI.Models.BarcodeAllotExpelledArchive", b =>
                {
                    b.Property<long?>("BarCode")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR_CODE");

                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<byte?>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<byte?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<int?>("SubId")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("SUB_ID");

                    b.Property<int?>("UdSlno")
                        .HasPrecision(6)
                        .HasColumnType("NUMBER(6)")
                        .HasColumnName("UD_SLNO");

                    b.Property<string>("UserId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(20)")
                        .HasColumnName("USER_ID");

                    b.ToTable("BARCODE_ALLOT_EXPELLED_ARCHIVE");
                });

            modelBuilder.Entity("ICABAPI.Models.BarcodeEdit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BarCode")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR_CODE");

                    b.Property<string>("EditDelete")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(6)")
                        .HasColumnName("EDIT_DELETE");

                    b.Property<DateTime?>("Editdate")
                        .HasColumnType("DATE")
                        .HasColumnName("EDITDATE");

                    b.Property<int?>("Editpart")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("EDITPART");

                    b.Property<string>("Edittime")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(8)")
                        .HasColumnName("EDITTIME");

                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<int?>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<string>("PcInfo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("PC_INFO");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<int?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<int?>("SubId")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("SUB_ID");

                    b.Property<int?>("UdSlno")
                        .HasPrecision(6)
                        .HasColumnType("NUMBER(6)")
                        .HasColumnName("UD_SLNO");

                    b.Property<string>("UserId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("USER_ID");

                    b.Property<string>("Userid1")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("USERID");

                    b.HasKey("Id");

                    b.ToTable("BARCODE_EDIT");
                });

            modelBuilder.Entity("ICABAPI.Models.Barseq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Barfrom")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("BARFROM");

                    b.Property<int?>("Barto")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("BARTO");

                    b.Property<int?>("ExamLevel")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int?>("MonthId")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("MONTH_ID");

                    b.Property<int?>("Scriptqty")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SCRIPTQTY");

                    b.Property<int?>("SessionYear")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SESSION_YEAR");

                    b.HasKey("Id");

                    b.ToTable("BARSEQ");
                });

            modelBuilder.Entity("ICABAPI.Models.BoardUniversity", b =>
                {
                    b.Property<decimal?>("Id")
                        .HasColumnType("NUMBER")
                        .HasColumnName("ID");

                    b.Property<decimal?>("BoardUniId")
                        .HasColumnType("NUMBER")
                        .HasColumnName("BOARD_UNI_ID");

                    b.Property<string>("BoardUniName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("BOARD_UNI_NAME");

                    b.HasKey("Id");

                    b.ToTable("BOARD_UNIVERSITY");
                });

            modelBuilder.Entity("ICABAPI.Models.CPLCourse", b =>
                {
                    b.Property<int>("COURSEID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("COURSENAME")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int?>("CPLSubjectSUBJECTID")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("SUBJECTID")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("COURSEID");

                    b.HasIndex("CPLSubjectSUBJECTID");

                    b.ToTable("CPLCOURSE");
                });

            modelBuilder.Entity("ICABAPI.Models.CPLDepartment", b =>
                {
                    b.Property<int>("DEPARTMENTID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DEPARTMENTNAME")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int>("SUBJECTID")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("DEPARTMENTID");

                    b.HasIndex("SUBJECTID")
                        .IsUnique();

                    b.ToTable("CPLDEPARTMENT");
                });

            modelBuilder.Entity("ICABAPI.Models.CPLSubject", b =>
                {
                    b.Property<int>("SUBJECTID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SUBJECTNAME")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("SUBJECTID");

                    b.ToTable("CPLSUBJECT");
                });

            modelBuilder.Entity("ICABAPI.Models.CPLUniversity", b =>
                {
                    b.Property<int>("UNIVERSITYID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("STUD_ID")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SUBJECTID");

                    b.Property<string>("UNIVERSITYNAME")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("UNIVERSITYID");

                    b.HasIndex("SubjectId")
                        .IsUnique();

                    b.ToTable("CPLUNIVERSITY");
                });

            modelBuilder.Entity("ICABAPI.Models.Chequebank", b =>
                {
                    b.Property<int?>("Cbcode")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("CBCODE")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cbname")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("CBNAME");

                    b.HasKey("Cbcode");

                    b.ToTable("CHEQUEBANK");
                });

            modelBuilder.Entity("ICABAPI.Models.ClassAttendance", b =>
                {
                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int?>("RefNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REF_NO");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<int?>("SubId")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SUB_ID");

                    b.ToTable("CLASS_ATTENDANCE");
                });

            modelBuilder.Entity("ICABAPI.Models.ClassAttendanceArch", b =>
                {
                    b.Property<int?>("ChangeId")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("CHANGE_ID");

                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int?>("RefNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REF_NO");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<byte?>("SubId")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SUB_ID");

                    b.ToTable("CLASS_ATTENDANCE_ARCH");
                });

            modelBuilder.Entity("ICABAPI.Models.Compinfo", b =>
                {
                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(200)")
                        .HasColumnName("ADDRESS");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("FAX");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("NAME");

                    b.Property<string>("Phone")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(200)")
                        .HasColumnName("PHONE");

                    b.Property<string>("Web")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("WEB");

                    b.ToTable("COMPINFO");
                });

            modelBuilder.Entity("ICABAPI.Models.ConversionCourseMark", b =>
                {
                    b.Property<int?>("BatchNo")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("BATCH_NO");

                    b.Property<string>("Classsession")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(25)")
                        .HasColumnName("CLASSSESSION");

                    b.Property<string>("Entryuser")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("ENTRYUSER");

                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int?>("ExamcenId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("EXAMCEN_ID");

                    b.Property<int?>("MarksSlno")
                        .HasPrecision(3)
                        .HasColumnType("NUMBER(3)")
                        .HasColumnName("MARKS_SLNO");

                    b.Property<string>("Reason")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(250)")
                        .HasColumnName("REASON");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<int?>("Rollno")
                        .HasPrecision(5)
                        .HasColumnType("NUMBER(5)")
                        .HasColumnName("ROLLNO");

                    b.Property<int?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<int?>("StudentSlno")
                        .HasColumnType("NUMBER(25)")
                        .HasColumnName("STUDENT_SLNO");

                    b.Property<int?>("SubId")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SUB_ID");

                    b.ToTable("CONVERSION_COURSE_MARKS");
                });

            modelBuilder.Entity("ICABAPI.Models.Country", b =>
                {
                    b.Property<byte?>("CountryId")
                        .HasPrecision(3)
                        .HasColumnType("NUMBER(3)")
                        .HasColumnName("COUNTRY_ID");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("NAME");

                    b.HasIndex(new[] { "CountryId" }, "PK_COUNT_ID")
                        .IsUnique()
                        .HasFilter("\"COUNTRY_ID\" IS NOT NULL");

                    b.HasIndex(new[] { "Name" }, "UNQ_COUNT_NAME")
                        .IsUnique()
                        .HasFilter("\"NAME\" IS NOT NULL");

                    b.ToTable("COUNTRY");
                });

            modelBuilder.Entity("ICABAPI.Models.CplStudentFile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImgPath")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int>("REGNO")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("SetExmpMouId")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("ID");

                    b.HasIndex("SetExmpMouId");

                    b.ToTable("EXSTUDENTFILE");
                });

            modelBuilder.Entity("ICABAPI.Models.Cpl_Models.ExCourse", b =>
                {
                    b.Property<int>("EXCOURSEID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EXCOURSENAME")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int>("EXICABSUBJECTID")
                        .HasColumnType("NUMBER(10)");

                    b.Property<double>("GPA")
                        .HasColumnType("BINARY_DOUBLE");

                    b.HasKey("EXCOURSEID");

                    b.HasIndex("EXICABSUBJECTID");

                    b.ToTable("ADMINCPLEXCOURSE");
                });

            modelBuilder.Entity("ICABAPI.Models.Cpl_Models.ExDepartment", b =>
                {
                    b.Property<int>("DEPARTMENTID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DEPARTMENTNAME")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int>("EXUNIVERSITYID")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("DEPARTMENTID");

                    b.HasIndex("EXUNIVERSITYID");

                    b.ToTable("ADMINCPLEXDEPARTMENT");
                });

            modelBuilder.Entity("ICABAPI.Models.Cpl_Models.ExExamLevel", b =>
                {
                    b.Property<int>("EXEXAMLEVELID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LEVELNAME")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int>("SUB_ID_OR_EXAMLEVELID")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("EXEXAMLEVELID");

                    b.ToTable("ADMINCPLEXEXAMLEVELS");
                });

            modelBuilder.Entity("ICABAPI.Models.Cpl_Models.ExICABSubject", b =>
                {
                    b.Property<int>("SUBJECTID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EXDEPARTMENTID")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("SUBJECTNAME")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int>("SUB_ID_OR_EXAMLEVELID")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("SUBJECTID");

                    b.HasIndex("EXDEPARTMENTID");

                    b.ToTable("ADMINCPLEXICABSUBJECTLIST");
                });

            modelBuilder.Entity("ICABAPI.Models.Cpl_Models.ExUniversity", b =>
                {
                    b.Property<int>("UNIVERSITYID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EXAMLEVELID")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("EXEXAMLEVELID")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("SUB_ID_OR_EXAMLEVELID")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("UNIVERSITYNAME")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("UNIVERSITYID");

                    b.HasIndex("EXEXAMLEVELID");

                    b.ToTable("ADMINCPLEXUNIVERSITY");
                });

            modelBuilder.Entity("ICABAPI.Models.Cpl_Models.ExUniversityList", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UNI_NAME")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("ID");

                    b.ToTable("UNIVERSITYLIST_CPL");
                });

            modelBuilder.Entity("ICABAPI.Models.Cpls_Student_Models.StudentCourse", b =>
                {
                    b.Property<int>("COURSEID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("COURSENAME")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<double>("GPA")
                        .HasColumnType("BINARY_DOUBLE");

                    b.Property<int>("STUDENTICABSUBJECTID")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("COURSEID");

                    b.HasIndex("STUDENTICABSUBJECTID");

                    b.ToTable("CPLSTUDENTCOURSE");
                });

            modelBuilder.Entity("ICABAPI.Models.Cpls_Student_Models.StudentExamLevel", b =>
                {
                    b.Property<int>("EXAMLEVELID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EXAMLEVELNAME")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int>("STUDENTREGID")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("SUB_ID_OR_EXAMLEVELID")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("EXAMLEVELID");

                    b.HasIndex("STUDENTREGID");

                    b.ToTable("CPLSTUDENTEXAMLEVEL");
                });

            modelBuilder.Entity("ICABAPI.Models.Cpls_Student_Models.StudentICABSubject", b =>
                {
                    b.Property<int>("SUBJECTID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("STUDENTEXAMLEVELID")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("SUBJECTNAME")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int>("SUB_ID_OR_EXAMLEVELID")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("SUBJECTID");

                    b.HasIndex("STUDENTEXAMLEVELID");

                    b.ToTable("CPLSTUDENTICABSUBJECT");
                });

            modelBuilder.Entity("ICABAPI.Models.Cpls_Student_Models.StudentReg", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("ACADEMICTRANSCRIPFILE")
                        .HasColumnType("RAW(2000)");

                    b.Property<int>("DEPARTMENTID")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("EXAMLEVELID")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("EXUNIVERSITYID")
                        .HasColumnType("NUMBER(10)");

                    b.Property<byte[]>("ICABIDCARDFILE")
                        .HasColumnType("RAW(2000)");

                    b.Property<bool>("ISVARIFIED")
                        .HasColumnType("NUMBER(1)");

                    b.Property<double>("OBTAINEDCGPA")
                        .HasColumnType("BINARY_DOUBLE");

                    b.Property<byte[]>("PAYMENTSLIPFILE")
                        .HasColumnType("RAW(2000)");

                    b.Property<string>("PAYSLIP")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int>("REGNO")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("ID");

                    b.HasIndex("DEPARTMENTID");

                    b.HasIndex("EXUNIVERSITYID");

                    b.ToTable("CPLSTUDENTREGISTRATION");
                });

            modelBuilder.Entity("ICABAPI.Models.Decodelog", b =>
                {
                    b.Property<int?>("ExamLevel")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int?>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<int?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<DateTime?>("Ddate")
                        .HasColumnType("DATE")
                        .HasColumnName("DDATE");

                    b.Property<string>("Dtime")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(8)")
                        .HasColumnName("DTIME");

                    b.Property<string>("Decoder")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("DECODER");

                    b.Property<string>("Decoder2nd")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("DECODER_2ND");

                    b.Property<string>("UserId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("USER_ID");

                    b.HasKey("ExamLevel", "MonthId", "SessionYear", "Ddate", "Dtime");

                    b.ToTable("DECODELOG");
                });

            modelBuilder.Entity("ICABAPI.Models.Decoder", b =>
                {
                    b.Property<string>("Fullname")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("FULLNAME");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("PASSWORD");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("USERNAME");

                    b.Property<string>("Who")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("WHO");

                    b.ToTable("DECODER");
                });

            modelBuilder.Entity("ICABAPI.Models.DecoderUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DESIGNATION")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("EMAIL")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<bool>("EMAILVERIFIED")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("NAME")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<byte[]>("PASSWORDHASH")
                        .HasColumnType("RAW(2000)");

                    b.Property<byte[]>("PASSWORDSALT")
                        .HasColumnType("RAW(2000)");

                    b.Property<string>("TOKENVALUE")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("ID");

                    b.ToTable("DECODERUSER");
                });

            modelBuilder.Entity("ICABAPI.Models.Democlass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("Id");

                    b.ToTable("DEMOCLASS");
                });

            modelBuilder.Entity("ICABAPI.Models.Depobank", b =>
                {
                    b.Property<string>("DbCode")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(4)")
                        .HasColumnName("DB_CODE");

                    b.Property<byte?>("DbId")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("DB_ID");

                    b.Property<string>("DbName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("DB_NAME");

                    b.Property<byte?>("DbOrder")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("DB_ORDER");

                    b.Property<bool?>("Depth")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("DEPTH");

                    b.Property<string>("Lr")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1)")
                        .HasColumnName("LR");

                    b.Property<byte?>("Parent")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("PARENT");

                    b.Property<byte?>("Topparent")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("TOPPARENT");

                    b.HasIndex(new[] { "DbId" }, "PK_DB_ID")
                        .IsUnique()
                        .HasFilter("\"DB_ID\" IS NOT NULL");

                    b.ToTable("DEPOBANK");
                });

            modelBuilder.Entity("ICABAPI.Models.EarlierPassed61", b =>
                {
                    b.Property<int?>("RegNo")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Ep611")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP611");

                    b.Property<int?>("Ep612")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP612");

                    b.Property<int?>("Ep613")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP613");

                    b.Property<int?>("Ep614")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP614");

                    b.Property<int?>("Ep615")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP615");

                    b.Property<int?>("Ep616")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP616");

                    b.Property<int?>("Ep617")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP617");

                    b.HasKey("RegNo");

                    b.ToTable("EARLIER_PASSED_61");
                });

            modelBuilder.Entity("ICABAPI.Models.EarlierPassed62", b =>
                {
                    b.Property<int?>("RegNo")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Ep621")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP621");

                    b.Property<int?>("Ep622")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP622");

                    b.Property<int?>("Ep623")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP623");

                    b.Property<int?>("Ep624")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP624");

                    b.Property<int?>("Ep625")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP625");

                    b.Property<int?>("Ep626")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP626");

                    b.Property<int?>("Ep627")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP627");

                    b.HasKey("RegNo");

                    b.ToTable("EARLIER_PASSED_62");
                });

            modelBuilder.Entity("ICABAPI.Models.EarlierPassed63", b =>
                {
                    b.Property<int?>("RegNo")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Ep631")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP631");

                    b.Property<int?>("Ep632")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP632");

                    b.Property<int?>("Ep633")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP633");

                    b.HasKey("RegNo");

                    b.ToTable("EARLIER_PASSED_63");
                });

            modelBuilder.Entity("ICABAPI.Models.ExamCentre", b =>
                {
                    b.Property<int>("CenId")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("CEN_ID")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(200)")
                        .HasColumnName("ADDRESS");

                    b.Property<string>("Buildings")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1000)")
                        .HasColumnName("BUILDINGS");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("NAME");

                    b.HasKey("CenId");

                    b.HasIndex(new[] { "CenId" }, "PK_CEN_ID")
                        .IsUnique();

                    b.ToTable("EXAM_CENTRE");
                });

            modelBuilder.Entity("ICABAPI.Models.ExamFee", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("NUMBER")
                        .HasColumnName("ID");

                    b.Property<decimal>("Amount")
                        .HasColumnType("NUMBER(10,2)")
                        .HasColumnName("AMOUNT");

                    b.Property<decimal>("ExamLevel")
                        .HasColumnType("NUMBER")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<decimal>("MonthId")
                        .HasColumnType("NUMBER")
                        .HasColumnName("MONTH_ID");

                    b.Property<decimal>("SessionYear")
                        .HasColumnType("NUMBER")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<decimal>("SubId")
                        .HasColumnType("NUMBER")
                        .HasColumnName("SUB_ID");

                    b.HasKey("Id");

                    b.ToTable("EXAM_FEE");
                });

            modelBuilder.Entity("ICABAPI.Models.ExamReg", b =>
                {
                    b.Property<int>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<int>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<int>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<int>("ExamcenId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("EXAMCEN_ID");

                    b.Property<string>("AttenAttached")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1)")
                        .HasColumnName("ATTEN_ATTACHED");

                    b.Property<string>("CcEnrno")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(20)")
                        .HasColumnName("CC_ENRNO");

                    b.Property<string>("CcSession")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(4)")
                        .HasColumnName("CC_SESSION");

                    b.Property<int?>("EntryType")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("ENTRY_TYPE");

                    b.Property<string>("Entryuser")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("ENTRYUSER");

                    b.Property<int>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<byte[]>("FileAttenAttached")
                        .HasColumnType("BLOB")
                        .HasColumnName("FILE_ATTEN_ATTACHED");

                    b.Property<byte[]>("FileFitnessAttached")
                        .HasColumnType("BLOB")
                        .HasColumnName("FILE_FITNESS_ATTACHED");

                    b.Property<byte[]>("FileTrainingAttached")
                        .HasColumnType("BLOB")
                        .HasColumnName("FILE_TRAINING_ATTACHED");

                    b.Property<DateTime?>("FillupDate")
                        .HasColumnType("DATE")
                        .HasColumnName("FILLUP_DATE");

                    b.Property<string>("FitnessAttached")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1)")
                        .HasColumnName("FITNESS_ATTACHED");

                    b.Property<string>("FormNo")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(9)")
                        .HasColumnName("FORM_NO");

                    b.Property<int?>("LastAppearedExamlevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("LAST_APPEARED_EXAMLEVEL");

                    b.Property<int?>("LastAppearedMonthid")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("LAST_APPEARED_MONTHID");

                    b.Property<int?>("LastAppearedRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("LAST_APPEARED_ROLLNO");

                    b.Property<int?>("LastAppearedYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("LAST_APPEARED_YEAR");

                    b.Property<string>("ReasonInvalid")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(200)")
                        .HasColumnName("REASON_INVALID");

                    b.Property<int>("Ref")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REF");

                    b.Property<int?>("StudType")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("STUD_TYPE");

                    b.Property<string>("TrainingAttached")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1)")
                        .HasColumnName("TRAINING_ATTACHED");

                    b.Property<DateTime?>("TrainingEnd")
                        .HasColumnType("DATE")
                        .HasColumnName("TRAINING_END");

                    b.Property<DateTime?>("TrainingSt")
                        .HasColumnType("DATE")
                        .HasColumnName("TRAINING_ST");

                    b.Property<int?>("Validity")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("VALIDITY");

                    b.HasKey("RegNo", "ExamLevel", "MonthId", "SessionYear", "ExamcenId");

                    b.ToTable("EXAM_REG");
                });

            modelBuilder.Entity("ICABAPI.Models.ExamRegArch", b =>
                {
                    b.Property<string>("AttenAttached")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1)")
                        .HasColumnName("ATTEN_ATTACHED");

                    b.Property<DateTime?>("ChangeDate")
                        .HasColumnType("DATE")
                        .HasColumnName("CHANGE_DATE");

                    b.Property<int?>("ChangeId")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("CHANGE_ID");

                    b.Property<string>("ChangeTime")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(8)")
                        .HasColumnName("CHANGE_TIME");

                    b.Property<string>("ChangeUser")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("CHANGE_USER");

                    b.Property<string>("EditDelete")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(6)")
                        .HasColumnName("EDIT_DELETE");

                    b.Property<bool?>("EntryType")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("ENTRY_TYPE");

                    b.Property<string>("Entryuser")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("ENTRYUSER");

                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<byte?>("ExamcenId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("EXAMCEN_ID");

                    b.Property<DateTime?>("FillupDate")
                        .HasColumnType("DATE")
                        .HasColumnName("FILLUP_DATE");

                    b.Property<string>("FitnessAttached")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1)")
                        .HasColumnName("FITNESS_ATTACHED");

                    b.Property<string>("FormNo")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(9)")
                        .HasColumnName("FORM_NO");

                    b.Property<int?>("LastAppearedExamlevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("LAST_APPEARED_EXAMLEVEL");

                    b.Property<byte?>("LastAppearedMonthid")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("LAST_APPEARED_MONTHID");

                    b.Property<int?>("LastAppearedRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("LAST_APPEARED_ROLLNO");

                    b.Property<byte?>("LastAppearedYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("LAST_APPEARED_YEAR");

                    b.Property<byte?>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<string>("PcInfo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("PC_INFO");

                    b.Property<string>("ReasonInvalid")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(200)")
                        .HasColumnName("REASON_INVALID");

                    b.Property<int?>("Ref")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REF");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<byte?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<byte?>("StudType")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("STUD_TYPE");

                    b.Property<string>("TrainingAttached")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1)")
                        .HasColumnName("TRAINING_ATTACHED");

                    b.Property<DateTime?>("TrainingEnd")
                        .HasColumnType("DATE")
                        .HasColumnName("TRAINING_END");

                    b.Property<DateTime?>("TrainingSt")
                        .HasColumnType("DATE")
                        .HasColumnName("TRAINING_ST");

                    b.Property<bool?>("Validity")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("VALIDITY");

                    b.ToTable("EXAM_REG_ARCH");
                });

            modelBuilder.Entity("ICABAPI.Models.ExamRegPassed", b =>
                {
                    b.Property<string>("ExamNamePassed")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(70)")
                        .HasColumnName("EXAM_NAME_PASSED");

                    b.Property<byte?>("ExamSl")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("EXAM_SL");

                    b.Property<string>("ExamcenPassed")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("EXAMCEN_PASSED");

                    b.Property<int?>("RefNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REF_NO");

                    b.Property<int?>("RollnoPassed")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("ROLLNO_PASSED");

                    b.Property<string>("SessionPassed")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(20)")
                        .HasColumnName("SESSION_PASSED");

                    b.Property<byte?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<int?>("StuRegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("STU_REG_NO");

                    b.ToTable("EXAM_REG_PASSED");
                });

            modelBuilder.Entity("ICABAPI.Models.ExamRegPassedArch", b =>
                {
                    b.Property<int?>("ChangeId")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("CHANGE_ID");

                    b.Property<string>("ExamNamePassed")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(70)")
                        .HasColumnName("EXAM_NAME_PASSED");

                    b.Property<byte?>("ExamSl")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("EXAM_SL");

                    b.Property<string>("ExamcenPassed")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("EXAMCEN_PASSED");

                    b.Property<int?>("RefNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REF_NO");

                    b.Property<int?>("RollnoPassed")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("ROLLNO_PASSED");

                    b.Property<string>("SessionPassed")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(20)")
                        .HasColumnName("SESSION_PASSED");

                    b.Property<byte?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<int?>("StuRegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("STU_REG_NO");

                    b.ToTable("EXAM_REG_PASSED_ARCH");
                });

            modelBuilder.Entity("ICABAPI.Models.ExamSaveflag", b =>
                {
                    b.Property<byte?>("Delaycounter")
                        .HasPrecision(3)
                        .HasColumnType("NUMBER(3)")
                        .HasColumnName("DELAYCOUNTER");

                    b.ToTable("EXAM_SAVEFLAG");
                });

            modelBuilder.Entity("ICABAPI.Models.ExamTimeSch", b =>
                {
                    b.Property<int>("ExamLevel")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<int>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<int>("SubId")
                        .HasPrecision(3)
                        .HasColumnType("NUMBER(3)")
                        .HasColumnName("SUB_ID");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("DATE")
                        .HasColumnName("EXAM_DATE");

                    b.Property<string>("ExamTime1")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(8)")
                        .HasColumnName("EXAM_TIME1");

                    b.Property<string>("ExamTime2")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(8)")
                        .HasColumnName("EXAM_TIME2");

                    b.Property<string>("ExamTime3")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(8)")
                        .HasColumnName("EXAM_TIME3");

                    b.Property<string>("ExamTime4")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(8)")
                        .HasColumnName("EXAM_TIME4");

                    b.Property<int>("OrderNo")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("ORDER_NO");

                    b.HasKey("ExamLevel", "MonthId", "SessionYear", "SubId");

                    b.ToTable("EXAM_TIME_SCH");
                });

            modelBuilder.Entity("ICABAPI.Models.ExamTimeSchAdmit", b =>
                {
                    b.Property<DateTime?>("ExamDate")
                        .HasColumnType("DATE")
                        .HasColumnName("EXAM_DATE");

                    b.Property<byte?>("ExamLevel")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<string>("ExamTime1")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(8)")
                        .HasColumnName("EXAM_TIME1");

                    b.Property<string>("ExamTime2")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(8)")
                        .HasColumnName("EXAM_TIME2");

                    b.Property<string>("ExamTime3")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(8)")
                        .HasColumnName("EXAM_TIME3");

                    b.Property<string>("ExamTime4")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(8)")
                        .HasColumnName("EXAM_TIME4");

                    b.Property<byte?>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<byte?>("OrderNo")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("ORDER_NO");

                    b.Property<byte?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<byte?>("SubId")
                        .HasPrecision(3)
                        .HasColumnType("NUMBER(3)")
                        .HasColumnName("SUB_ID");

                    b.ToTable("EXAM_TIME_SCH_ADMIT");
                });

            modelBuilder.Entity("ICABAPI.Models.ExamTimeSchCurr", b =>
                {
                    b.Property<DateTime?>("ExamDate")
                        .HasColumnType("DATE")
                        .HasColumnName("EXAM_DATE");

                    b.Property<byte?>("ExamLevel")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<string>("ExamTime1")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(8)")
                        .HasColumnName("EXAM_TIME1");

                    b.Property<string>("ExamTime2")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(8)")
                        .HasColumnName("EXAM_TIME2");

                    b.Property<string>("ExamTime3")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(8)")
                        .HasColumnName("EXAM_TIME3");

                    b.Property<string>("ExamTime4")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(8)")
                        .HasColumnName("EXAM_TIME4");

                    b.Property<byte?>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<byte?>("OrderNo")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("ORDER_NO");

                    b.Property<byte?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<byte?>("SubId")
                        .HasPrecision(3)
                        .HasColumnType("NUMBER(3)")
                        .HasColumnName("SUB_ID");

                    b.ToTable("EXAM_TIME_SCH_CURR");
                });

            modelBuilder.Entity("ICABAPI.Models.ExemptedSub", b =>
                {
                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int?>("SubId")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SUB_ID");

                    b.Property<int?>("Ref")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REF");

                    b.HasKey("RegNo", "ExamLevel", "SubId", "Ref");

                    b.ToTable("EXEMPTED_SUB");
                });

            modelBuilder.Entity("ICABAPI.Models.ExemptedSubArch", b =>
                {
                    b.Property<int?>("ChangeId")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("CHANGE_ID");

                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int?>("Ref")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REF");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<byte?>("SubId")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SUB_ID");

                    b.ToTable("EXEMPTED_SUB_ARCH");
                });

            modelBuilder.Entity("ICABAPI.Models.FirmMas1", b =>
                {
                    b.Property<int?>("FirmMas1Id")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("FIRMMAS1ID")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DoDeed")
                        .HasColumnType("DATE")
                        .HasColumnName("DO_DEED");

                    b.Property<string>("Entryuser")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("ENTRYUSER");

                    b.Property<int>("FIRMREGNO")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("FId")
                        .HasPrecision(6)
                        .HasColumnType("NUMBER(6)")
                        .HasColumnName("F_ID");

                    b.Property<string>("FName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("F_NAME");

                    b.Property<int>("FType")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("F_TYPE");

                    b.Property<int>("NumPartner")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("NUM_PARTNER");

                    b.HasKey("FirmMas1Id");

                    b.ToTable("FIRM_MAS1");
                });

            modelBuilder.Entity("ICABAPI.Models.FirmMas2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(200)")
                        .HasColumnName("ADDRESS");

                    b.Property<int>("BrType")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("BR_TYPE");

                    b.Property<string>("Cell")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("CELL");

                    b.Property<string>("ContPer")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(40)")
                        .HasColumnName("CONT_PER");

                    b.Property<DateTime?>("DoStart")
                        .HasColumnType("DATE")
                        .HasColumnName("DO_START");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("EMAIL");

                    b.Property<int>("FId")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("NUMBER(6)")
                        .HasColumnName("F_ID")
                        .HasDefaultValueSql("(0 ) ");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("FAX");

                    b.Property<int?>("FirmMas1Id")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("FIRMMAS1ID");

                    b.Property<byte?>("LocId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("LOC_ID");

                    b.Property<string>("Ph")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("PH");

                    b.Property<string>("Website")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("WEBSITE");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FirmMas1Id" }, "IX_FIRM_MAS2_FirmMas1Id");

                    b.ToTable("FIRM_MAS2");
                });

            modelBuilder.Entity("ICABAPI.Models.FlagForDecode", b =>
                {
                    b.Property<byte?>("ExamLevel")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<decimal?>("Flag")
                        .HasColumnType("NUMBER")
                        .HasColumnName("FLAG");

                    b.Property<byte?>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<byte?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.ToTable("FLAG_FOR_DECODE");
                });

            modelBuilder.Entity("ICABAPI.Models.FormFillUptableForMoodle", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ID")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("APPEARINGFLAG")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("APPEARINGFLAG");

                    b.Property<int>("BARCODE")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("BARCODE");

                    b.Property<int>("EXAMLEVEL")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("EXAMLEVEL");

                    b.Property<int>("EXAMROLL")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("EXAMROLL");

                    b.Property<string>("FATHERSNAME")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("FATHERSNAME");

                    b.Property<int>("MONTHID")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("MONTHID");

                    b.Property<string>("NAME")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("NAME");

                    b.Property<int>("REFNO")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("REFNO");

                    b.Property<int>("REGNO")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("REGNO");

                    b.Property<int>("SESSIONYEAR")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SESSIONYEAR");

                    b.HasKey("ID");

                    b.ToTable("FORMFILLUPTABLEMOODLE");
                });

            modelBuilder.Entity("ICABAPI.Models.FormFillupAndExamRunningStatus", b =>
                {
                    b.Property<decimal>("ExamLevel")
                        .HasColumnType("NUMBER(38)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<decimal>("MonthId")
                        .HasColumnType("NUMBER(38)")
                        .HasColumnName("MONTH_ID");

                    b.Property<decimal>("SessionYear")
                        .HasColumnType("NUMBER(38)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<decimal>("ExamRunningStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(38)")
                        .HasColumnName("EXAM_RUNNING_STATUS")
                        .HasDefaultValueSql("0 ");

                    b.Property<decimal>("FormFillupStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(38)")
                        .HasColumnName("FORM_FILLUP_STATUS")
                        .HasDefaultValueSql("0 ");

                    b.HasKey("ExamLevel", "MonthId", "SessionYear")
                        .HasName("FORM_FILLUP_AND_EXAM_RUNNING_STATUS_PK");

                    b.ToTable("FORM_FILLUP_AND_EXAM_RUNNING_STATUS");
                });

            modelBuilder.Entity("ICABAPI.Models.GradeDetail", b =>
                {
                    b.Property<int>("RefNo")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("REF_NO");

                    b.Property<decimal>("GradeSl")
                        .HasColumnType("NUMBER")
                        .HasColumnName("GRADE_SL");

                    b.Property<int>("EndingMarks")
                        .HasPrecision(3)
                        .HasColumnType("NUMBER(3)")
                        .HasColumnName("ENDING_MARKS");

                    b.Property<string>("LetterGrade")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)")
                        .HasColumnName("LETTER_GRADE");

                    b.Property<int>("StartingMarks")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("STARTING_MARKS");

                    b.HasKey("RefNo", "GradeSl");

                    b.ToTable("GRADE_DETAILS");
                });

            modelBuilder.Entity("ICABAPI.Models.GradeSy", b =>
                {
                    b.Property<int>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<int>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<int>("SubId")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SUB_ID");

                    b.Property<int>("RefNo")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("REF_NO");

                    b.HasKey("ExamLevel", "MonthId", "SessionYear", "SubId");

                    b.ToTable("GRADE_SYS");
                });

            modelBuilder.Entity("ICABAPI.Models.GradeSysChanged", b =>
                {
                    b.Property<DateTime?>("ChangeDate")
                        .HasColumnType("DATE")
                        .HasColumnName("CHANGE_DATE");

                    b.Property<string>("ChangeReason")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(500)")
                        .HasColumnName("CHANGE_REASON");

                    b.Property<string>("ChangeUser")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("CHANGE_USER");

                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int?>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<int?>("RefNo")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("REF_NO");

                    b.Property<int?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<int?>("SubId")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SUB_ID");

                    b.Property<string>("Time")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("TIME");

                    b.Property<int?>("TrackId")
                        .HasPrecision(7)
                        .HasColumnType("NUMBER(7)")
                        .HasColumnName("TRACK_ID");

                    b.ToTable("GRADE_SYS_CHANGED");
                });

            modelBuilder.Entity("ICABAPI.Models.GroupSubject", b =>
                {
                    b.Property<decimal?>("Id")
                        .HasColumnType("NUMBER")
                        .HasColumnName("ID");

                    b.Property<decimal?>("GroupSubId")
                        .HasColumnType("NUMBER")
                        .HasColumnName("GROUP_SUB_ID");

                    b.Property<string>("GroupSubName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("GROUP_SUB_NAME");

                    b.HasKey("Id");

                    b.ToTable("GROUP_SUBJECT");
                });

            modelBuilder.Entity("ICABAPI.Models.HelloWorld", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("Id");

                    b.ToTable("HelloWorld");
                });

            modelBuilder.Entity("ICABAPI.Models.Incomehead", b =>
                {
                    b.Property<bool?>("Depth")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("DEPTH");

                    b.Property<string>("InheadCode")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(4)")
                        .HasColumnName("INHEAD_CODE");

                    b.Property<byte?>("InheadId")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("INHEAD_ID");

                    b.Property<byte?>("InheadidOrder")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("INHEADID_ORDER");

                    b.Property<string>("Lr")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1)")
                        .HasColumnName("LR");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("NAME");

                    b.Property<byte?>("Parent")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("PARENT");

                    b.Property<byte?>("Topparent")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("TOPPARENT");

                    b.HasIndex(new[] { "InheadId" }, "PK_INHEAD_ID")
                        .IsUnique()
                        .HasFilter("\"INHEAD_ID\" IS NOT NULL");

                    b.ToTable("INCOMEHEAD");
                });

            modelBuilder.Entity("ICABAPI.Models.Location", b =>
                {
                    b.Property<int>("LocId")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("LOC_ID")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(30)")
                        .HasColumnName("L_NAME");

                    b.HasKey("LocId");

                    b.HasIndex(new[] { "LocId" }, "PK_LOC_LID")
                        .IsUnique();

                    b.ToTable("LOCATION");
                });

            modelBuilder.Entity("ICABAPI.Models.MainMenu", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MENUNAME")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("MENUURL")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("ID");

                    b.ToTable("MAINMENU");
                });

            modelBuilder.Entity("ICABAPI.Models.MainMi", b =>
                {
                    b.ToView("MAIN_MIS");
                });

            modelBuilder.Entity("ICABAPI.Models.MarksAllot", b =>
                {
                    b.Property<int?>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<int?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<int?>("SubId")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("SUB_ID");

                    b.Property<int?>("Examiner")
                        .HasPrecision(5)
                        .HasColumnType("NUMBER(5)")
                        .HasColumnName("EXAMINER");

                    b.Property<int?>("BarCode")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR_CODE");

                    b.Property<string>("Entryuser")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("ENTRYUSER");

                    b.Property<decimal?>("Grace")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("GRACE");

                    b.Property<string>("Grade")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)")
                        .HasColumnName("GRADE");

                    b.Property<decimal?>("Marks")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("MARKS");

                    b.Property<decimal?>("Outmarks")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("OUTMARKS");

                    b.Property<int?>("Scriptsl")
                        .HasPrecision(5)
                        .HasColumnType("NUMBER(5)")
                        .HasColumnName("SCRIPTSL");

                    b.HasKey("MonthId", "SessionYear", "SubId", "Examiner", "BarCode");

                    b.ToTable("MARKS_ALLOT");
                });

            modelBuilder.Entity("ICABAPI.Models.MarksAllotEdit", b =>
                {
                    b.Property<int?>("TrackId")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(7)
                        .HasColumnType("NUMBER(7)")
                        .HasColumnName("TRACK_ID")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BarCode")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR_CODE");

                    b.Property<DateTime?>("ChangeDate")
                        .HasColumnType("DATE")
                        .HasColumnName("CHANGE_DATE");

                    b.Property<int?>("ChangeMood")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("CHANGE_MOOD");

                    b.Property<string>("ChangeTime")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(8)")
                        .HasColumnName("CHANGE_TIME");

                    b.Property<string>("ChangeUser")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("CHANGE_USER");

                    b.Property<string>("EditDelete")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(6)")
                        .HasColumnName("EDIT_DELETE");

                    b.Property<string>("Entryuser")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("ENTRYUSER");

                    b.Property<int?>("Examiner")
                        .HasPrecision(5)
                        .HasColumnType("NUMBER(5)")
                        .HasColumnName("EXAMINER");

                    b.Property<decimal?>("Grace")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("GRACE");

                    b.Property<string>("Grade")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)")
                        .HasColumnName("GRADE");

                    b.Property<decimal?>("Marks")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("MARKS");

                    b.Property<int?>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<decimal?>("Outmarks")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("OUTMARKS");

                    b.Property<string>("PcInfo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("PC_INFO");

                    b.Property<int?>("Scriptsl")
                        .HasPrecision(5)
                        .HasColumnType("NUMBER(5)")
                        .HasColumnName("SCRIPTSL");

                    b.Property<int?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<int?>("SubId")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("SUB_ID");

                    b.HasKey("TrackId");

                    b.ToTable("MARKS_ALLOT_EDIT");
                });

            modelBuilder.Entity("ICABAPI.Models.MarksAllotExpelledArchive", b =>
                {
                    b.Property<long?>("BarCode")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR_CODE");

                    b.Property<string>("Entryuser")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("ENTRYUSER");

                    b.Property<short?>("Examiner")
                        .HasPrecision(5)
                        .HasColumnType("NUMBER(5)")
                        .HasColumnName("EXAMINER");

                    b.Property<decimal?>("Grace")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("GRACE");

                    b.Property<string>("Grade")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)")
                        .HasColumnName("GRADE");

                    b.Property<decimal?>("Marks")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("MARKS");

                    b.Property<byte?>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<decimal?>("Outmarks")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("OUTMARKS");

                    b.Property<short?>("Scriptsl")
                        .HasPrecision(5)
                        .HasColumnType("NUMBER(5)")
                        .HasColumnName("SCRIPTSL");

                    b.Property<byte?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<int?>("SubId")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("SUB_ID");

                    b.ToTable("MARKS_ALLOT_EXPELLED_ARCHIVE");
                });

            modelBuilder.Entity("ICABAPI.Models.MarksEditArchive", b =>
                {
                    b.Property<long?>("BarCode")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR_CODE");

                    b.Property<DateTime?>("ChangeDate")
                        .HasColumnType("DATE")
                        .HasColumnName("CHANGE_DATE");

                    b.Property<string>("ChangeUser")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("CHANGE_USER");

                    b.Property<string>("Entryuser")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("ENTRYUSER");

                    b.Property<decimal?>("Marks")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("MARKS");

                    b.Property<byte?>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<string>("PcInfo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("PC_INFO");

                    b.Property<decimal?>("Prevmarks")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("PREVMARKS");

                    b.Property<short?>("Scriptsl")
                        .HasPrecision(5)
                        .HasColumnType("NUMBER(5)")
                        .HasColumnName("SCRIPTSL");

                    b.Property<byte?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<int?>("SubId")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("SUB_ID");

                    b.Property<int?>("TrackId")
                        .HasPrecision(7)
                        .HasColumnType("NUMBER(7)")
                        .HasColumnName("TRACK_ID");

                    b.ToView("MARKS_EDIT_ARCHIVE");
                });

            modelBuilder.Entity("ICABAPI.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cell")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("CELL");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("EMAIL");

                    b.Property<short>("Enrno")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5)
                        .HasColumnType("NUMBER(5)")
                        .HasColumnName("ENRNO")
                        .HasDefaultValueSql("0 ");

                    b.Property<int>("MemId")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("MEM_ID");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("NAME");

                    b.Property<int>("Prof")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("PROF")
                        .HasDefaultValueSql("0 ");

                    b.HasKey("Id");

                    b.ToTable("MEMBER");
                });

            modelBuilder.Entity("ICABAPI.Models.MemberArchive1", b =>
                {
                    b.Property<string>("Academic")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("ACADEMIC");

                    b.Property<byte?>("Adminyear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("ADMINYEAR");

                    b.Property<string>("BAdd")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(150)")
                        .HasColumnName("B_ADD");

                    b.Property<string>("BloodGr")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)")
                        .HasColumnName("BLOOD_GR");

                    b.Property<string>("Cell")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("CELL");

                    b.Property<DateTime?>("ChangeDate")
                        .HasColumnType("DATE")
                        .HasColumnName("CHANGE_DATE");

                    b.Property<byte?>("ChildrenNo")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("CHILDREN_NO");

                    b.Property<string>("CountName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("COUNT_NAME");

                    b.Property<DateTime?>("DateEnr")
                        .HasColumnType("DATE")
                        .HasColumnName("DATE_ENR");

                    b.Property<string>("EditDelete")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(6)")
                        .HasColumnName("EDIT_DELETE");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("EMAIL");

                    b.Property<short?>("Enrno")
                        .HasPrecision(5)
                        .HasColumnType("NUMBER(5)")
                        .HasColumnName("ENRNO");

                    b.Property<string>("FName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("F_NAME");

                    b.Property<string>("Fax")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(30)")
                        .HasColumnName("FAX");

                    b.Property<string>("MName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("M_NAME");

                    b.Property<int?>("MemId")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("MEM_ID");

                    b.Property<string>("NId")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(15)")
                        .HasColumnName("N_ID");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("NAME");

                    b.Property<bool?>("P")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("PassNo")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("PASS_NO");

                    b.Property<string>("Ph")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("PH");

                    b.Property<string>("PreAdd")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(200)")
                        .HasColumnName("PRE_ADD");

                    b.Property<bool?>("Prof")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("PROF");

                    b.Property<string>("Res")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(30)")
                        .HasColumnName("RES");

                    b.Property<int?>("StuReg")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("STU_REG");

                    b.Property<string>("Time")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("TIME");

                    b.Property<int?>("TrackId")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("TRACK_ID");

                    b.Property<byte?>("UserId")
                        .HasPrecision(3)
                        .HasColumnType("NUMBER(3)")
                        .HasColumnName("USER_ID");

                    b.Property<string>("Web")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(30)")
                        .HasColumnName("WEB");

                    b.ToTable("MEMBER_ARCHIVE");
                });

            modelBuilder.Entity("ICABAPI.Models.Memberarchive", b =>
                {
                    b.Property<string>("Academic")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("ACADEMIC");

                    b.Property<byte?>("Adminyear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("ADMINYEAR");

                    b.Property<string>("BAdd")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(150)")
                        .HasColumnName("B_ADD");

                    b.Property<string>("BloodGr")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)")
                        .HasColumnName("BLOOD_GR");

                    b.Property<string>("Cell")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("CELL");

                    b.Property<DateTime?>("ChangeDate")
                        .HasColumnType("DATE")
                        .HasColumnName("CHANGE_DATE");

                    b.Property<byte?>("ChildrenNo")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("CHILDREN_NO");

                    b.Property<string>("CountName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("COUNT_NAME");

                    b.Property<DateTime?>("DateEnr")
                        .HasColumnType("DATE")
                        .HasColumnName("DATE_ENR");

                    b.Property<string>("EditDelete")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(6)")
                        .HasColumnName("EDIT_DELETE");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("EMAIL");

                    b.Property<short?>("Enrno")
                        .HasPrecision(5)
                        .HasColumnType("NUMBER(5)")
                        .HasColumnName("ENRNO");

                    b.Property<string>("Entryuser")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(7)")
                        .HasColumnName("ENTRYUSER");

                    b.Property<string>("FName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("F_NAME");

                    b.Property<string>("Fax")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(30)")
                        .HasColumnName("FAX");

                    b.Property<string>("MName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("M_NAME");

                    b.Property<int?>("MemId")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("MEM_ID");

                    b.Property<string>("NId")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(15)")
                        .HasColumnName("N_ID");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("NAME");

                    b.Property<bool?>("P")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("PassNo")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("PASS_NO");

                    b.Property<string>("Ph")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("PH");

                    b.Property<string>("PreAdd")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(200)")
                        .HasColumnName("PRE_ADD");

                    b.Property<bool?>("Prof")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("PROF");

                    b.Property<string>("Res")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(30)")
                        .HasColumnName("RES");

                    b.Property<int?>("StuReg")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("STU_REG");

                    b.Property<string>("Time")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("TIME");

                    b.Property<int?>("TrackId")
                        .HasPrecision(7)
                        .HasColumnType("NUMBER(7)")
                        .HasColumnName("TRACK_ID");

                    b.Property<byte?>("UserId")
                        .HasPrecision(3)
                        .HasColumnType("NUMBER(3)")
                        .HasColumnName("USER_ID");

                    b.Property<string>("Web")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(30)")
                        .HasColumnName("WEB");

                    b.ToTable("MEMBERARCHIVE");
                });

            modelBuilder.Entity("ICABAPI.Models.MenuMaster", b =>
                {
                    b.Property<int>("MenuIdentity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("MenuFileName")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("MenuID")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("MenuName")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("MenuURL")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Parent_MenuID")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("USE_YN")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("User_Roll")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("MenuIdentity");

                    b.ToTable("MENUMASTER");
                });

            modelBuilder.Entity("ICABAPI.Models.MouStatus62", b =>
                {
                    b.Property<bool?>("Appeared")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("APPEARED");

                    b.Property<long?>("Bar621")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR621");

                    b.Property<long?>("Bar622")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR622");

                    b.Property<long?>("Bar623")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR623");

                    b.Property<long?>("Bar624")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR624");

                    b.Property<long?>("Bar625")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR625");

                    b.Property<long?>("Bar626")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR626");

                    b.Property<long?>("Bar627")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR627");

                    b.Property<long?>("Bar628")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR628");

                    b.Property<bool?>("Completed")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("COMPLETED");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<bool?>("Exempted")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("EXEMPTED");

                    b.Property<string>("FName")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(70)")
                        .HasColumnName("F_NAME");

                    b.Property<string>("G621")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G622")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G623")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G624")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G625")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G626")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G627")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G628")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(150)")
                        .HasColumnName("NAME");

                    b.Property<byte?>("Passcount")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("PASSCOUNT");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<int?>("Sl621")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL621");

                    b.Property<int?>("Sl622")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL622");

                    b.Property<int?>("Sl623")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL623");

                    b.Property<int?>("Sl624")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL624");

                    b.Property<int?>("Sl625")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL625");

                    b.Property<int?>("Sl626")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL626");

                    b.Property<int?>("Sl627")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL627");

                    b.Property<int?>("Sl628")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL628");

                    b.Property<decimal?>("Sub621")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB621");

                    b.Property<decimal?>("Sub622")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB622");

                    b.Property<decimal?>("Sub623")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB623");

                    b.Property<decimal?>("Sub624")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB624");

                    b.Property<decimal?>("Sub625")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB625");

                    b.Property<decimal?>("Sub626")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB626");

                    b.Property<decimal?>("Sub627")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB627");

                    b.Property<decimal?>("Sub628")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB628");

                    b.ToTable("MOU_STATUS_62");
                });

            modelBuilder.Entity("ICABAPI.Models.MouStatus63", b =>
                {
                    b.Property<bool?>("Appeared")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("APPEARED");

                    b.Property<long?>("Bar631")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR631");

                    b.Property<long?>("Bar632")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR632");

                    b.Property<long?>("Bar633")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR633");

                    b.Property<long?>("Bar634")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR634");

                    b.Property<long?>("Bar635")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR635");

                    b.Property<long?>("Bar636")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR636");

                    b.Property<long?>("Bar637")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR637");

                    b.Property<long?>("Bar638")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR638");

                    b.Property<bool?>("Completed")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("COMPLETED");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<bool?>("Exempted")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("EXEMPTED");

                    b.Property<string>("FName")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(70)")
                        .HasColumnName("F_NAME");

                    b.Property<string>("G631")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G632")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G633")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G634")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G635")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G636")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G637")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G638")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(150)")
                        .HasColumnName("NAME");

                    b.Property<byte?>("Passcount")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("PASSCOUNT");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<int?>("Sl631")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL631");

                    b.Property<int?>("Sl632")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL632");

                    b.Property<int?>("Sl633")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL633");

                    b.Property<int?>("Sl634")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL634");

                    b.Property<int?>("Sl635")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL635");

                    b.Property<int?>("Sl636")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL636");

                    b.Property<int?>("Sl637")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL637");

                    b.Property<int?>("Sl638")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL638");

                    b.Property<decimal?>("Sub631")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB631");

                    b.Property<decimal?>("Sub632")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB632");

                    b.Property<decimal?>("Sub633")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB633");

                    b.Property<decimal?>("Sub634")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB634");

                    b.Property<decimal?>("Sub635")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB635");

                    b.Property<decimal?>("Sub636")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB636");

                    b.Property<decimal?>("Sub637")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB637");

                    b.Property<decimal?>("Sub638")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB638");

                    b.ToTable("MOU_STATUS_63");
                });

            modelBuilder.Entity("ICABAPI.Models.NewTestModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("Id");

                    b.ToTable("NewTestModels");
                });

            modelBuilder.Entity("ICABAPI.Models.OddsessionMouExmpSub", b =>
                {
                    b.Property<string>("Calendermonth")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("CALENDERMONTH");

                    b.Property<byte?>("Calendermonthid")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("CALENDERMONTHID");

                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<byte?>("ExamSession")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("EXAM_SESSION");

                    b.Property<byte?>("ExamYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EXAM_YEAR");

                    b.Property<int?>("ExmptSubid")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXMPT_SUBID");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<bool?>("Status")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("STATUS");

                    b.Property<byte?>("StudType")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("STUD_TYPE");

                    b.Property<byte?>("SubId")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SUB_ID");

                    b.Property<string>("SubName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("SUB_NAME");

                    b.ToTable("ODDSESSION_MOU_EXMP_SUB");
                });

            modelBuilder.Entity("ICABAPI.Models.PassedByExemption", b =>
                {
                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<byte?>("ExamSession")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("EXAM_SESSION");

                    b.Property<byte?>("ExamYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EXAM_YEAR");

                    b.Property<int?>("ExmptSubid")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXMPT_SUBID");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<byte?>("StudType")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("STUD_TYPE");

                    b.ToTable("PASSED_BY_EXEMPTION");
                });

            modelBuilder.Entity("ICABAPI.Models.Prin", b =>
                {
                    b.Property<DateTime?>("DateEnr")
                        .HasColumnType("DATE")
                        .HasColumnName("DATE_ENR");

                    b.Property<short?>("Enrno")
                        .HasPrecision(5)
                        .HasColumnType("NUMBER(5)")
                        .HasColumnName("ENRNO");

                    b.Property<int?>("FId")
                        .HasPrecision(6)
                        .HasColumnType("NUMBER(6)")
                        .HasColumnName("F_ID");

                    b.Property<int?>("MemId")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("MEM_ID");

                    b.Property<string>("Month")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)")
                        .HasColumnName("MONTH");

                    b.Property<bool?>("P")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("Year")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(4)")
                        .HasColumnName("YEAR");

                    b.ToView("PRIN");
                });

            modelBuilder.Entity("ICABAPI.Models.Principal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DECEASEDDATE")
                        .HasColumnType("DATE")
                        .HasColumnName("DECEASEDDATE");

                    b.Property<int?>("EnrNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("ENR_NO");

                    b.Property<int?>("FId")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(6)
                        .HasColumnType("NUMBER(6)")
                        .HasColumnName("F_ID")
                        .HasDefaultValueSql("0 ");

                    b.Property<int>("MemId")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("MEM_ID");

                    b.Property<string>("PreStatus")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(20)")
                        .HasColumnName("PRE_STATUS");

                    b.Property<int?>("PrinId")
                        .HasPrecision(5)
                        .HasColumnType("NUMBER(5)")
                        .HasColumnName("PRIN_ID");

                    b.HasKey("Id");

                    b.ToTable("PRINCIPAL");
                });

            modelBuilder.Entity("ICABAPI.Models.ProPartner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ID")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FId")
                        .HasPrecision(6)
                        .HasColumnType("NUMBER(6)")
                        .HasColumnName("F_ID");

                    b.Property<int?>("FirmMas1Id")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("MemId")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("MEM_ID");

                    b.HasKey("Id");

                    b.HasIndex("FirmMas1Id");

                    b.ToTable("PRO_PARTNER");
                });

            modelBuilder.Entity("ICABAPI.Models.RegSubject", b =>
                {
                    b.Property<int>("RefNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REF_NO");

                    b.Property<int>("SubId")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SUB_ID");

                    b.Property<int>("EntryType")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("ENTRY_TYPE");

                    b.HasKey("RefNo", "SubId");

                    b.ToTable("REG_SUBJECT");
                });

            modelBuilder.Entity("ICABAPI.Models.RegSubjectArch", b =>
                {
                    b.Property<int?>("ChangeId")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("CHANGE_ID");

                    b.Property<bool?>("EntryType")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("ENTRY_TYPE");

                    b.Property<int?>("RefNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REF_NO");

                    b.Property<byte?>("SubId")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SUB_ID");

                    b.ToTable("REG_SUBJECT_ARCH");
                });

            modelBuilder.Entity("ICABAPI.Models.ResultBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BlockDate")
                        .HasColumnType("DATE")
                        .HasColumnName("BLOCK_DATE");

                    b.Property<string>("Entryuser")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("ENTRYUSER");

                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int?>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<string>("Reason")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(200)")
                        .HasColumnName("REASON");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<int?>("Rollno")
                        .HasPrecision(5)
                        .HasColumnType("NUMBER(5)")
                        .HasColumnName("ROLLNO");

                    b.Property<int?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("STATUS");

                    b.HasKey("Id");

                    b.ToTable("RESULT_BLOCK");
                });

            modelBuilder.Entity("ICABAPI.Models.ResultBlockArch", b =>
                {
                    b.Property<int?>("RegNo")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BackDate")
                        .HasColumnType("DATE")
                        .HasColumnName("BACK_DATE");

                    b.Property<string>("BackReason")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(200)")
                        .HasColumnName("BACK_REASON");

                    b.Property<DateTime?>("BlockDate")
                        .HasColumnType("DATE")
                        .HasColumnName("BLOCK_DATE");

                    b.Property<DateTime?>("ChangeDate")
                        .HasColumnType("DATE")
                        .HasColumnName("CHANGE_DATE");

                    b.Property<string>("ChangeTime")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(8)")
                        .HasColumnName("CHANGE_TIME");

                    b.Property<string>("Entryuser")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("ENTRYUSER");

                    b.Property<string>("Entryuserb")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("ENTRYUSERB");

                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int?>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<string>("Reason")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(200)")
                        .HasColumnName("REASON");

                    b.Property<int?>("Rollno")
                        .HasPrecision(5)
                        .HasColumnType("NUMBER(5)")
                        .HasColumnName("ROLLNO");

                    b.Property<int?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.HasKey("RegNo");

                    b.ToTable("RESULT_BLOCK_ARCH");
                });

            modelBuilder.Entity("ICABAPI.Models.ResultLock", b =>
                {
                    b.Property<int>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<int>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<string>("Entryuser")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("ENTRYUSER");

                    b.Property<int>("RLock")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("R_LOCK");

                    b.HasKey("ExamLevel", "MonthId", "SessionYear");

                    b.ToTable("RESULT_LOCK");
                });

            modelBuilder.Entity("ICABAPI.Models.Roomwiseroll", b =>
                {
                    b.Property<byte?>("Rollno")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("ROLLNO");

                    b.Property<byte?>("Roomno")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("ROOMNO");

                    b.ToTable("ROOMWISEROLL");
                });

            modelBuilder.Entity("ICABAPI.Models.Seatplan", b =>
                {
                    b.Property<int>("ExamLevel")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int>("MonthId")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("MONTH_ID");

                    b.Property<int>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<int>("CenId")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("CEN_ID");

                    b.Property<int>("SubId")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SUB_ID");

                    b.Property<string>("RoomNo")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(15)")
                        .HasColumnName("ROOM_NO");

                    b.Property<string>("Building")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(120)")
                        .HasColumnName("BUILDING");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("DATE")
                        .HasColumnName("EXAM_DATE");

                    b.Property<string>("Floor")
                        .HasMaxLength(115)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(115)")
                        .HasColumnName("FLOOR");

                    b.Property<int?>("NoOfSeat")
                        .HasPrecision(3)
                        .HasColumnType("NUMBER(3)")
                        .HasColumnName("NO_OF_SEAT");

                    b.Property<int>("Rollfrom")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("ROLLFROM");

                    b.Property<int>("Rollto")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("ROLLTO");

                    b.HasKey("ExamLevel", "MonthId", "SessionYear", "CenId", "SubId", "RoomNo");

                    b.ToTable("SEATPLAN");
                });

            modelBuilder.Entity("ICABAPI.Models.SessionInfo", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("SESSION_ID")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SessionDetailsName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("SESSION_DETAILS_NAME");

                    b.Property<string>("SessionName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(30)")
                        .HasColumnName("SESSION_NAME");

                    b.HasKey("SessionId");

                    b.ToTable("SESSION_INFO");
                });

            modelBuilder.Entity("ICABAPI.Models.SetExmpMou", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ID")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int?>("ExamSession")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("EXAM_SESSION");

                    b.Property<int?>("ExamYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EXAM_YEAR");

                    b.Property<int?>("ExmptSubid")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXMPT_SUBID");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<byte?>("StudType")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("STUD_TYPE");

                    b.HasKey("Id");

                    b.ToTable("SET_EXMP_MOU");
                });

            modelBuilder.Entity("ICABAPI.Models.Signature", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("NUMBER")
                        .HasColumnName("ID");

                    b.Property<string>("Controller")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("CONTROLLER");

                    b.Property<byte[]>("ControllerSign")
                        .HasColumnType("BLOB")
                        .HasColumnName("CONTROLLER_SIGN");

                    b.Property<decimal?>("ExamLevel")
                        .HasColumnType("NUMBER")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<decimal?>("MonthId")
                        .HasColumnType("NUMBER")
                        .HasColumnName("MONTH_ID");

                    b.Property<string>("SecretaryCeo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("SECRETARY_CEO");

                    b.Property<byte[]>("SecretaryCeoSign")
                        .HasColumnType("BLOB")
                        .HasColumnName("SECRETARY_CEO_SIGN");

                    b.Property<decimal?>("SessionYear")
                        .HasColumnType("NUMBER")
                        .HasColumnName("SESSION_YEAR");

                    b.HasKey("Id");

                    b.ToTable("SIGNATURE");
                });

            modelBuilder.Entity("ICABAPI.Models.Softwareuser", b =>
                {
                    b.Property<string>("Cbogroup")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("CBOGROUP");

                    b.Property<string>("Change")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(3)")
                        .HasColumnName("CHANGE");

                    b.Property<string>("Fullname")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("FULLNAME");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("PASSWORD");

                    b.Property<string>("UserStatus")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("USER_STATUS");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("USERNAME");

                    b.ToTable("SOFTWAREUSER");
                });

            modelBuilder.Entity("ICABAPI.Models.StuCancel", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("NUMBER")
                        .HasColumnName("ID");

                    b.Property<DateTime?>("CwDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATE")
                        .HasColumnName("CW_DATE")
                        .HasDefaultValueSql("SYSDATE");

                    b.Property<decimal>("CwFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER")
                        .HasColumnName("CW_FLAG")
                        .HasDefaultValueSql("0 ");

                    b.Property<string>("CwReason")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(200)")
                        .HasColumnName("CW_REASON");

                    b.Property<decimal>("ExamLevel")
                        .HasColumnType("NUMBER")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<decimal>("ExamRollno")
                        .HasColumnType("NUMBER")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<decimal>("MonthId")
                        .HasColumnType("NUMBER")
                        .HasColumnName("MONTH_ID");

                    b.Property<DateTime?>("Periodfrom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATE")
                        .HasColumnName("PERIODFROM")
                        .HasDefaultValueSql("SYSDATE");

                    b.Property<DateTime?>("Periodto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATE")
                        .HasColumnName("PERIODTO")
                        .HasDefaultValueSql("SYSDATE");

                    b.Property<string>("Reason")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(200)")
                        .HasColumnName("REASON");

                    b.Property<decimal>("RegNo")
                        .HasColumnType("NUMBER")
                        .HasColumnName("REG_NO");

                    b.Property<decimal>("SessionYear")
                        .HasColumnType("NUMBER")
                        .HasColumnName("SESSION_YEAR");

                    b.HasKey("Id");

                    b.ToTable("STU_CANCEL");
                });

            modelBuilder.Entity("ICABAPI.Models.StuInfoWebAdmit", b =>
                {
                    b.Property<string>("CenAddr")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(200)")
                        .HasColumnName("CEN_ADDR");

                    b.Property<string>("CenName")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(30)")
                        .HasColumnName("CEN_NAME");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("DATE")
                        .HasColumnName("DOB");

                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<string>("Examlevel1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("EXAMLEVEL");

                    b.Property<string>("FName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("F_NAME");

                    b.Property<string>("Imagepath")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(200)")
                        .HasColumnName("IMAGEPATH");

                    b.Property<string>("MName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("M_NAME");

                    b.Property<int?>("MonthId")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("MONTH_ID");

                    b.Property<bool?>("Msg")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("MSG");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(150)")
                        .HasColumnName("NAME");

                    b.Property<string>("PreAdd")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(300)")
                        .HasColumnName("PRE_ADD");

                    b.Property<int?>("Ref")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REF");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<int?>("SessionYear")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("SESSION_YEAR");

                    b.ToTable("STU_INFO_WEB_ADMIT");
                });

            modelBuilder.Entity("ICABAPI.Models.StuReg1", b =>
                {
                    b.Property<int>("RegNo")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AltMobNo")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(20)")
                        .HasColumnName("ALT_MOB_NO");

                    b.Property<string>("ArticleSname")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(8)")
                        .HasColumnName("ARTICLE_SNAME");

                    b.Property<string>("BloodGr")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)")
                        .HasColumnName("BLOOD_GR");

                    b.Property<string>("Cell")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("CELL");

                    b.Property<byte[]>("Defaultimage")
                        .HasColumnType("BLOB")
                        .HasColumnName("DEFAULTIMAGE");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("DATE")
                        .HasColumnName("DOB");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("Entryuser")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("ENTRYUSER");

                    b.Property<int?>("FId")
                        .HasPrecision(6)
                        .HasColumnType("NUMBER(6)")
                        .HasColumnName("F_ID");

                    b.Property<string>("FName")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(70)")
                        .HasColumnName("F_NAME");

                    b.Property<string>("Fax")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(30)")
                        .HasColumnName("FAX");

                    b.Property<string>("FirmName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("FIRM_NAME");

                    b.Property<decimal?>("GenStuType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER")
                        .HasColumnName("GENSTU_TYPE")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1)")
                        .HasColumnName("GENDER");

                    b.Property<int?>("Imageapprovalpending")
                        .HasMaxLength(1)
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("IMAGEAPPROVALPENDING");

                    b.Property<string>("Imagepath")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(200)")
                        .HasColumnName("IMAGEPATH");

                    b.Property<string>("MName")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(70)")
                        .HasColumnName("M_NAME");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(150)")
                        .HasColumnName("NAME");

                    b.Property<string>("NationalId")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(15)")
                        .HasColumnName("NATIONAL_ID");

                    b.Property<string>("Nationality")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(15)")
                        .HasColumnName("NATIONALITY");

                    b.Property<string>("PerAdd")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(300)")
                        .HasColumnName("PER_ADD");

                    b.Property<DateTime?>("PeriodFrom")
                        .HasColumnType("DATE")
                        .HasColumnName("PERIOD_FROM");

                    b.Property<DateTime?>("PeriodTo")
                        .HasColumnType("DATE")
                        .HasColumnName("PERIOD_TO");

                    b.Property<string>("Ph")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("PH");

                    b.Property<string>("PreAdd")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(300)")
                        .HasColumnName("PRE_ADD");

                    b.Property<int?>("PrinEnrNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("PRIN_ENR_NO");

                    b.Property<decimal?>("PrinID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER")
                        .HasColumnName("PRIN_ID")
                        .HasDefaultValueSql("0");

                    b.Property<string>("PrinName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("PRIN_NAME");

                    b.Property<DateTime?>("RegDate")
                        .HasColumnType("DATE")
                        .HasColumnName("REG_DATE");

                    b.Property<int?>("RegYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("REG_YEAR");

                    b.Property<string>("Religion")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("RELIGION");

                    b.Property<byte[]>("Requestednewimage")
                        .HasColumnType("BLOB")
                        .HasColumnName("REQUESTEDNEWIMAGE");

                    b.Property<string>("Salutation")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(20)")
                        .HasColumnName("SALUTATION");

                    b.Property<int?>("StudType")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("STUD_TYPE");

                    b.Property<int>("UserDobChangeLimit")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10,0)")
                        .HasColumnName("USERDOBCHANGELIMIT");

                    b.HasKey("RegNo");

                    b.ToTable("STU_REG1");
                });

            modelBuilder.Entity("ICABAPI.Models.StuReg1Arch", b =>
                {
                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<int?>("ChangeId")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("CHANGE_ID");

                    b.Property<string>("BloodGr")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)")
                        .HasColumnName("BLOOD_GR");

                    b.Property<string>("Cell")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("CELL");

                    b.Property<DateTime?>("ChangeDate")
                        .HasColumnType("DATE")
                        .HasColumnName("CHANGE_DATE");

                    b.Property<string>("ChangeTime")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(8)")
                        .HasColumnName("CHANGE_TIME");

                    b.Property<string>("ChangeUser")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("CHANGE_USER");

                    b.Property<byte[]>("Defaultimage")
                        .HasColumnType("BLOB")
                        .HasColumnName("DEFAULTIMAGE");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("DATE")
                        .HasColumnName("DOB");

                    b.Property<string>("EditDelete")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(6)")
                        .HasColumnName("EDIT_DELETE");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("Entryuser")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("ENTRYUSER");

                    b.Property<int?>("FId")
                        .HasPrecision(6)
                        .HasColumnType("NUMBER(6)")
                        .HasColumnName("F_ID");

                    b.Property<string>("FName")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(70)")
                        .HasColumnName("F_NAME");

                    b.Property<string>("Fax")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(30)")
                        .HasColumnName("FAX");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1)")
                        .HasColumnName("GENDER");

                    b.Property<string>("Imagepath")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(200)")
                        .HasColumnName("IMAGEPATH");

                    b.Property<string>("MName")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(70)")
                        .HasColumnName("M_NAME");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(150)")
                        .HasColumnName("NAME");

                    b.Property<string>("NationalId")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(15)")
                        .HasColumnName("NATIONAL_ID");

                    b.Property<string>("Nationality")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(15)")
                        .HasColumnName("NATIONALITY");

                    b.Property<string>("PerAdd")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(300)")
                        .HasColumnName("PER_ADD");

                    b.Property<DateTime?>("PeriodFrom")
                        .HasColumnType("DATE")
                        .HasColumnName("PERIOD_FROM");

                    b.Property<DateTime?>("PeriodTo")
                        .HasColumnType("DATE")
                        .HasColumnName("PERIOD_TO");

                    b.Property<string>("Ph")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("PH");

                    b.Property<string>("PreAdd")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(300)")
                        .HasColumnName("PRE_ADD");

                    b.Property<int?>("PrinEnrNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("PRIN_ENR_NO");

                    b.Property<DateTime?>("RegDate")
                        .HasColumnType("DATE")
                        .HasColumnName("REG_DATE");

                    b.Property<int?>("RegYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("REG_YEAR");

                    b.Property<string>("Religion")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("RELIGION");

                    b.Property<int?>("StudType")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("STUD_TYPE");

                    b.HasKey("RegNo", "ChangeId");

                    b.ToTable("STU_REG1_ARCH");
                });

            modelBuilder.Entity("ICABAPI.Models.StuReg1ModExam", b =>
                {
                    b.Property<string>("BloodGr")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)")
                        .HasColumnName("BLOOD_GR");

                    b.Property<string>("Cell")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("CELL");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("DATE")
                        .HasColumnName("DOB");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("Entryuser")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("ENTRYUSER");

                    b.Property<int?>("FId")
                        .HasPrecision(6)
                        .HasColumnType("NUMBER(6)")
                        .HasColumnName("F_ID");

                    b.Property<string>("FName")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(70)")
                        .HasColumnName("F_NAME");

                    b.Property<string>("Fax")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(30)")
                        .HasColumnName("FAX");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1)")
                        .HasColumnName("GENDER");

                    b.Property<string>("Imagepath")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(200)")
                        .HasColumnName("IMAGEPATH");

                    b.Property<string>("MName")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(70)")
                        .HasColumnName("M_NAME");

                    b.Property<bool?>("MonthId")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("MONTH_ID");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("NAME");

                    b.Property<string>("NationalId")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(15)")
                        .HasColumnName("NATIONAL_ID");

                    b.Property<string>("Nationality")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(15)")
                        .HasColumnName("NATIONALITY");

                    b.Property<string>("PerAdd")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(300)")
                        .HasColumnName("PER_ADD");

                    b.Property<DateTime?>("PeriodFrom")
                        .HasColumnType("DATE")
                        .HasColumnName("PERIOD_FROM");

                    b.Property<DateTime?>("PeriodTo")
                        .HasColumnType("DATE")
                        .HasColumnName("PERIOD_TO");

                    b.Property<string>("Ph")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("PH");

                    b.Property<string>("PreAdd")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(300)")
                        .HasColumnName("PRE_ADD");

                    b.Property<int?>("PrinEnrNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("PRIN_ENR_NO");

                    b.Property<DateTime?>("RegDate")
                        .HasColumnType("DATE")
                        .HasColumnName("REG_DATE");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<byte?>("RegYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("REG_YEAR");

                    b.Property<string>("Religion")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("RELIGION");

                    b.Property<byte?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<byte?>("StudType")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("STUD_TYPE");

                    b.ToTable("STU_REG1_MOD_EXAM");
                });

            modelBuilder.Entity("ICABAPI.Models.StuReg2", b =>
                {
                    b.Property<int>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<string>("ExamName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(20)")
                        .HasColumnName("EXAM_NAME");

                    b.Property<string>("AcademicLevel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("ACADEMIC_LEVEL");

                    b.Property<string>("BoardUni")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(150)")
                        .HasColumnName("BOARD_UNI");

                    b.Property<string>("CertificationLevel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("CERTIFICATION_LEVEL");

                    b.Property<string>("Group")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("GROUP");

                    b.Property<string>("Institute")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("INSTITUTE");

                    b.Property<int?>("PassYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("PASS_YEAR");

                    b.Property<int?>("ResultDiv")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("RESULT_DIV");

                    b.Property<decimal?>("ResultGpa")
                        .HasColumnType("NUMBER(3,2)")
                        .HasColumnName("RESULT_GPA");

                    b.Property<decimal?>("ResultOutOfGpa")
                        .HasColumnType("NUMBER(3,2)")
                        .HasColumnName("RESULT_OUT_OF_GPA");

                    b.Property<string>("ResultProf")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("RESULT_PROF");

                    b.HasKey("RegNo", "ExamName");

                    b.ToTable("STU_REG2");
                });

            modelBuilder.Entity("ICABAPI.Models.StuReg2Arch", b =>
                {
                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<string>("ExamName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(20)")
                        .HasColumnName("EXAM_NAME");

                    b.Property<int?>("ChangeId")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("CHANGE_ID");

                    b.Property<string>("AcademicLevel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("ACADEMIC_LEVEL");

                    b.Property<string>("BoardUni")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("BOARD_UNI");

                    b.Property<string>("Group")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("GROUP");

                    b.Property<int?>("PassYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("PASS_YEAR");

                    b.Property<int?>("ResultDiv")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("RESULT_DIV");

                    b.Property<decimal?>("ResultGpa")
                        .HasColumnType("NUMBER(3,2)")
                        .HasColumnName("RESULT_GPA");

                    b.Property<decimal?>("ResultOutOfGpa")
                        .HasColumnType("NUMBER(3,2)")
                        .HasColumnName("RESULT_OUT_OF_GPA");

                    b.Property<string>("ResultProf")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("RESULT_PROF");

                    b.HasKey("RegNo", "ExamName", "ChangeId");

                    b.ToTable("STU_REG2_ARCH");
                });

            modelBuilder.Entity("ICABAPI.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("ICABAPI.Models.StudentExpelled", b =>
                {
                    b.Property<string>("Entryuser")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("ENTRYUSER");

                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<byte?>("ExamYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EXAM_YEAR");

                    b.Property<byte?>("ExamcenId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("EXAMCEN_ID");

                    b.Property<byte?>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<string>("Reason")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(200)")
                        .HasColumnName("REASON");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<int?>("Rollno")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ROLLNO");

                    b.Property<byte?>("SessionFrom")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_FROM");

                    b.Property<byte?>("SessionTo")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_TO");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(20)")
                        .HasColumnName("STATUS");

                    b.Property<string>("YearFrom")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(4)")
                        .HasColumnName("YEAR_FROM");

                    b.Property<string>("YearTo")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(4)")
                        .HasColumnName("YEAR_TO");

                    b.ToTable("STUDENT_EXPELLED");
                });

            modelBuilder.Entity("ICABAPI.Models.StudentExpelledArch", b =>
                {
                    b.Property<DateTime?>("ChangeDate")
                        .HasColumnType("DATE")
                        .HasColumnName("CHANGE_DATE");

                    b.Property<string>("ChangeTime")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(8)")
                        .HasColumnName("CHANGE_TIME");

                    b.Property<string>("EditDelete")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(6)")
                        .HasColumnName("EDIT_DELETE");

                    b.Property<string>("Entryuser")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("ENTRYUSER");

                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<byte?>("ExamYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EXAM_YEAR");

                    b.Property<byte?>("ExamcenId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("EXAMCEN_ID");

                    b.Property<byte?>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<string>("Reason")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(200)")
                        .HasColumnName("REASON");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<int?>("Rollno")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ROLLNO");

                    b.Property<byte?>("SessionFrom")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_FROM");

                    b.Property<byte?>("SessionTo")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_TO");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(20)")
                        .HasColumnName("STATUS");

                    b.Property<string>("YearFrom")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(4)")
                        .HasColumnName("YEAR_FROM");

                    b.Property<string>("YearTo")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(4)")
                        .HasColumnName("YEAR_TO");

                    b.ToTable("STUDENT_EXPELLED_ARCH");
                });

            modelBuilder.Entity("ICABAPI.Models.StudentOfIcmabAcca", b =>
                {
                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<byte?>("ExamSession")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("EXAM_SESSION");

                    b.Property<byte?>("ExamYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EXAM_YEAR");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<byte?>("StudType")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("STUD_TYPE");

                    b.Property<int?>("SubId")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("SUB_ID");

                    b.ToTable("STUDENT_OF_ICMAB_ACCA");
                });

            modelBuilder.Entity("ICABAPI.Models.StudentRegCancelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CanDate")
                        .HasColumnType("DATE")
                        .HasColumnName("CAN_DATE");

                    b.Property<string>("Entryuser")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("ENTRYUSER");

                    b.Property<string>("Firmname")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(200)")
                        .HasColumnName("FIRMNAME");

                    b.Property<string>("Fname")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(200)")
                        .HasColumnName("FNAME");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(200)")
                        .HasColumnName("NAME");

                    b.Property<string>("PrinName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(200)")
                        .HasColumnName("PRIN_NAME");

                    b.Property<string>("Reason")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(200)")
                        .HasColumnName("REASON");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<string>("Status")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(15)")
                        .HasColumnName("STATUS");

                    b.Property<DateTime?>("Withdrawn_Date")
                        .HasColumnType("TIMESTAMP(7)");

                    b.HasKey("Id");

                    b.ToTable("STUDENT_REG_CANCELATION");
                });

            modelBuilder.Entity("ICABAPI.Models.StudentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<byte?>("StudId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("STUD_ID");

                    b.Property<string>("StudType")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(150)")
                        .HasColumnName("STUD_TYPE");

                    b.HasKey("Id");

                    b.ToTable("STUDENT_TYPE");
                });

            modelBuilder.Entity("ICABAPI.Models.Stutype23exempsub", b =>
                {
                    b.Property<string>("AttenAttached")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1)")
                        .HasColumnName("ATTEN_ATTACHED");

                    b.Property<bool?>("EntryType")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("ENTRY_TYPE");

                    b.Property<string>("Entryuser")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("ENTRYUSER");

                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<byte?>("ExamcenId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("EXAMCEN_ID");

                    b.Property<string>("FName")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(70)")
                        .HasColumnName("F_NAME");

                    b.Property<DateTime?>("FillupDate")
                        .HasColumnType("DATE")
                        .HasColumnName("FILLUP_DATE");

                    b.Property<string>("FitnessAttached")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1)")
                        .HasColumnName("FITNESS_ATTACHED");

                    b.Property<string>("FormNo")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(9)")
                        .HasColumnName("FORM_NO");

                    b.Property<int?>("LastAppearedExamlevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("LAST_APPEARED_EXAMLEVEL");

                    b.Property<byte?>("LastAppearedMonthid")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("LAST_APPEARED_MONTHID");

                    b.Property<int?>("LastAppearedRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("LAST_APPEARED_ROLLNO");

                    b.Property<byte?>("LastAppearedYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("LAST_APPEARED_YEAR");

                    b.Property<byte?>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(150)")
                        .HasColumnName("NAME");

                    b.Property<string>("ReasonInvalid")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(200)")
                        .HasColumnName("REASON_INVALID");

                    b.Property<int?>("Ref")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REF");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<byte?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<byte?>("StudType")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("STUD_TYPE");

                    b.Property<string>("TrainingAttached")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1)")
                        .HasColumnName("TRAINING_ATTACHED");

                    b.Property<DateTime?>("TrainingEnd")
                        .HasColumnType("DATE")
                        .HasColumnName("TRAINING_END");

                    b.Property<DateTime?>("TrainingSt")
                        .HasColumnType("DATE")
                        .HasColumnName("TRAINING_ST");

                    b.Property<bool?>("Validity")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("VALIDITY");

                    b.ToTable("STUTYPE23EXEMPSUB");
                });

            modelBuilder.Entity("ICABAPI.Models.SubMenu", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MAINMENUID")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("SUBMENUNAME")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("SUBMENUURL")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("ID");

                    b.HasIndex("MAINMENUID");

                    b.ToTable("SUBMENU");
                });

            modelBuilder.Entity("ICABAPI.Models.Subject", b =>
                {
                    b.Property<int>("SubId")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SUB_ID")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Depth")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("DEPTH");

                    b.Property<string>("Entryuser")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(15)")
                        .HasColumnName("ENTRYUSER");

                    b.Property<string>("Lr")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1)")
                        .HasColumnName("LR");

                    b.Property<int>("Outofmarks")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("NUMBER(3)")
                        .HasColumnName("OUTOFMARKS")
                        .HasDefaultValueSql("0 ");

                    b.Property<int>("Parent")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("PARENT");

                    b.Property<string>("SubCode")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(4)")
                        .HasColumnName("SUB_CODE");

                    b.Property<string>("SubName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("SUB_NAME");

                    b.Property<int>("SubOrder")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("SUB_ORDER");

                    b.Property<int>("Topparent")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("TOPPARENT");

                    b.Property<int?>("UdsubCode")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("UDSUB_CODE");

                    b.HasKey("SubId");

                    b.HasIndex(new[] { "SubId" }, "PK_SUB_ID")
                        .IsUnique();

                    b.ToTable("SUBJECT");
                });

            modelBuilder.Entity("ICABAPI.Models.TabLevel1", b =>
                {
                    b.Property<bool?>("Appeared")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("APPEARED");

                    b.Property<long?>("Bar11")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR11");

                    b.Property<long?>("Bar12")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR12");

                    b.Property<long?>("Bar13")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR13");

                    b.Property<long?>("Bar14")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR14");

                    b.Property<long?>("Bar15")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR15");

                    b.Property<long?>("Bar16")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR16");

                    b.Property<long?>("Bar17")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR17");

                    b.Property<long?>("Bar18")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR18");

                    b.Property<bool?>("Completed")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("COMPLETED");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<bool?>("Exempted")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("EXEMPTED");

                    b.Property<string>("G11")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G12")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G13")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G14")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G15")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G16")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G17")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G18")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<byte?>("Passcount")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("PASSCOUNT");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<int?>("Sl11")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL11");

                    b.Property<int?>("Sl12")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL12");

                    b.Property<int?>("Sl13")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL13");

                    b.Property<int?>("Sl14")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL14");

                    b.Property<int?>("Sl15")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL15");

                    b.Property<int?>("Sl16")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL16");

                    b.Property<int?>("Sl17")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL17");

                    b.Property<int?>("Sl18")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL18");

                    b.Property<decimal?>("Sub11")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB11");

                    b.Property<decimal?>("Sub12")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB12");

                    b.Property<decimal?>("Sub13")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB13");

                    b.Property<decimal?>("Sub14")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB14");

                    b.Property<decimal?>("Sub15")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB15");

                    b.Property<decimal?>("Sub16")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB16");

                    b.Property<decimal?>("Sub17")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB17");

                    b.Property<decimal?>("Sub18")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB18");

                    b.ToTable("TAB_LEVEL_1");
                });

            modelBuilder.Entity("ICABAPI.Models.TabLevel2", b =>
                {
                    b.Property<bool?>("Appeared")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("APPEARED");

                    b.Property<long?>("Bar21")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR21");

                    b.Property<long?>("Bar22")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR22");

                    b.Property<long?>("Bar23")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR23");

                    b.Property<long?>("Bar24")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR24");

                    b.Property<long?>("Bar25")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR25");

                    b.Property<long?>("Bar26")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR26");

                    b.Property<long?>("Bar27")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR27");

                    b.Property<long?>("Bar28")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR28");

                    b.Property<bool?>("Completed")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("COMPLETED");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<bool?>("Exempted")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("EXEMPTED");

                    b.Property<string>("G21")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G22")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G23")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G24")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G25")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G26")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G27")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G28")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<byte?>("Passcount")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("PASSCOUNT");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<int?>("Sl21")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL21");

                    b.Property<int?>("Sl22")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL22");

                    b.Property<int?>("Sl23")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL23");

                    b.Property<int?>("Sl24")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL24");

                    b.Property<int?>("Sl25")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL25");

                    b.Property<int?>("Sl26")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL26");

                    b.Property<int?>("Sl27")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL27");

                    b.Property<int?>("Sl28")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL28");

                    b.Property<decimal?>("Sub21")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB21");

                    b.Property<decimal?>("Sub22")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB22");

                    b.Property<decimal?>("Sub23")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB23");

                    b.Property<decimal?>("Sub24")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB24");

                    b.Property<decimal?>("Sub25")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB25");

                    b.Property<decimal?>("Sub26")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB26");

                    b.Property<decimal?>("Sub27")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB27");

                    b.Property<decimal?>("Sub28")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB28");

                    b.ToTable("TAB_LEVEL_2");
                });

            modelBuilder.Entity("ICABAPI.Models.TabLevel3", b =>
                {
                    b.Property<bool?>("Appeared")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("APPEARED");

                    b.Property<long?>("Bar31")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR31");

                    b.Property<long?>("Bar32")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR32");

                    b.Property<long?>("Bar33")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR33");

                    b.Property<long?>("Bar34")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR34");

                    b.Property<long?>("Bar35")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR35");

                    b.Property<long?>("Bar36")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR36");

                    b.Property<long?>("Bar37")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR37");

                    b.Property<long?>("Bar38")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR38");

                    b.Property<bool?>("Completed")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("COMPLETED");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<bool?>("Exempted")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("EXEMPTED");

                    b.Property<string>("G31")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G32")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G33")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G34")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G35")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G36")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G37")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G38")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<byte?>("Passcount")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("PASSCOUNT");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<int?>("Sl31")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL31");

                    b.Property<int?>("Sl32")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL32");

                    b.Property<int?>("Sl33")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL33");

                    b.Property<int?>("Sl34")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL34");

                    b.Property<int?>("Sl35")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL35");

                    b.Property<int?>("Sl36")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL36");

                    b.Property<int?>("Sl37")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL37");

                    b.Property<int?>("Sl38")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL38");

                    b.Property<decimal?>("Sub31")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB31");

                    b.Property<decimal?>("Sub32")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB32");

                    b.Property<decimal?>("Sub33")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB33");

                    b.Property<decimal?>("Sub34")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB34");

                    b.Property<decimal?>("Sub35")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB35");

                    b.Property<decimal?>("Sub36")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB36");

                    b.Property<decimal?>("Sub37")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB37");

                    b.Property<decimal?>("Sub38")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB38");

                    b.ToTable("TAB_LEVEL_3");
                });

            modelBuilder.Entity("ICABAPI.Models.TabLevel41", b =>
                {
                    b.Property<bool?>("Appeared")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("APPEARED");

                    b.Property<long?>("Bar411")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR411");

                    b.Property<long?>("Bar412")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR412");

                    b.Property<long?>("Bar413")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR413");

                    b.Property<long?>("Bar414")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR414");

                    b.Property<long?>("Bar415")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR415");

                    b.Property<long?>("Bar416")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR416");

                    b.Property<long?>("Bar417")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR417");

                    b.Property<long?>("Bar418")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR418");

                    b.Property<bool?>("Completed")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("COMPLETED");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<bool?>("Exempted")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("EXEMPTED");

                    b.Property<string>("G411")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G412")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G413")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G414")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G415")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G416")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G417")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G418")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<byte?>("Passcount")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("PASSCOUNT");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<int?>("Sl411")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL411");

                    b.Property<int?>("Sl412")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL412");

                    b.Property<int?>("Sl413")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL413");

                    b.Property<int?>("Sl414")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL414");

                    b.Property<int?>("Sl415")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL415");

                    b.Property<int?>("Sl416")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL416");

                    b.Property<int?>("Sl417")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL417");

                    b.Property<int?>("Sl418")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL418");

                    b.Property<decimal?>("Sub411")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB411");

                    b.Property<decimal?>("Sub412")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB412");

                    b.Property<decimal?>("Sub413")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB413");

                    b.Property<decimal?>("Sub414")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB414");

                    b.Property<decimal?>("Sub415")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB415");

                    b.Property<decimal?>("Sub416")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB416");

                    b.Property<decimal?>("Sub417")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB417");

                    b.Property<decimal?>("Sub418")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB418");

                    b.ToTable("TAB_LEVEL_41");
                });

            modelBuilder.Entity("ICABAPI.Models.TabLevel42", b =>
                {
                    b.Property<bool?>("Appeared")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("APPEARED");

                    b.Property<long?>("Bar421")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR421");

                    b.Property<long?>("Bar422")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR422");

                    b.Property<long?>("Bar423")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR423");

                    b.Property<long?>("Bar424")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR424");

                    b.Property<long?>("Bar425")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR425");

                    b.Property<long?>("Bar426")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR426");

                    b.Property<long?>("Bar427")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR427");

                    b.Property<long?>("Bar428")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR428");

                    b.Property<bool?>("Completed")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("COMPLETED");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<bool?>("Exempted")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("EXEMPTED");

                    b.Property<string>("G421")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G422")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G423")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G424")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G425")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G426")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G427")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G428")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<byte?>("Passcount")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("PASSCOUNT");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<int?>("Sl421")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL421");

                    b.Property<int?>("Sl422")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL422");

                    b.Property<int?>("Sl423")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL423");

                    b.Property<int?>("Sl424")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL424");

                    b.Property<int?>("Sl425")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL425");

                    b.Property<int?>("Sl426")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL426");

                    b.Property<int?>("Sl427")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL427");

                    b.Property<int?>("Sl428")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL428");

                    b.Property<decimal?>("Sub421")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB421");

                    b.Property<decimal?>("Sub422")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB422");

                    b.Property<decimal?>("Sub423")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB423");

                    b.Property<decimal?>("Sub424")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB424");

                    b.Property<decimal?>("Sub425")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB425");

                    b.Property<decimal?>("Sub426")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB426");

                    b.Property<decimal?>("Sub427")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB427");

                    b.Property<decimal?>("Sub428")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB428");

                    b.ToTable("TAB_LEVEL_42");
                });

            modelBuilder.Entity("ICABAPI.Models.TabLevel51", b =>
                {
                    b.Property<bool?>("Appeared")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("APPEARED");

                    b.Property<long?>("Bar511")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR511");

                    b.Property<long?>("Bar512")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR512");

                    b.Property<long?>("Bar513")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR513");

                    b.Property<long?>("Bar514")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR514");

                    b.Property<long?>("Bar515")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR515");

                    b.Property<long?>("Bar516")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR516");

                    b.Property<long?>("Bar517")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR517");

                    b.Property<long?>("Bar518")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR518");

                    b.Property<bool?>("Completed")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("COMPLETED");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<bool?>("Exempted")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("EXEMPTED");

                    b.Property<string>("G511")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G512")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G513")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G514")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G515")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G516")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G517")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G518")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<byte?>("Passcount")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("PASSCOUNT");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<int?>("Sl511")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL511");

                    b.Property<int?>("Sl512")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL512");

                    b.Property<int?>("Sl513")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL513");

                    b.Property<int?>("Sl514")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL514");

                    b.Property<int?>("Sl515")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL515");

                    b.Property<int?>("Sl516")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL516");

                    b.Property<int?>("Sl517")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL517");

                    b.Property<int?>("Sl518")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL518");

                    b.Property<decimal?>("Sub511")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB511");

                    b.Property<decimal?>("Sub512")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB512");

                    b.Property<decimal?>("Sub513")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB513");

                    b.Property<decimal?>("Sub514")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB514");

                    b.Property<decimal?>("Sub515")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB515");

                    b.Property<decimal?>("Sub516")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB516");

                    b.Property<decimal?>("Sub517")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB517");

                    b.Property<decimal?>("Sub518")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB518");

                    b.ToTable("TAB_LEVEL_51");
                });

            modelBuilder.Entity("ICABAPI.Models.TabLevel52", b =>
                {
                    b.Property<bool?>("Appeared")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("APPEARED");

                    b.Property<long?>("Bar521")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR521");

                    b.Property<long?>("Bar522")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR522");

                    b.Property<long?>("Bar523")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR523");

                    b.Property<long?>("Bar524")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR524");

                    b.Property<long?>("Bar525")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR525");

                    b.Property<long?>("Bar526")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR526");

                    b.Property<long?>("Bar527")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR527");

                    b.Property<long?>("Bar528")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR528");

                    b.Property<bool?>("Completed")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("COMPLETED");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<bool?>("Exempted")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("EXEMPTED");

                    b.Property<string>("G521")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G522")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G523")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G524")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G525")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G526")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G527")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G528")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<byte?>("Passcount")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("PASSCOUNT");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<int?>("Sl521")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL521");

                    b.Property<int?>("Sl522")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL522");

                    b.Property<int?>("Sl523")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL523");

                    b.Property<int?>("Sl524")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL524");

                    b.Property<int?>("Sl525")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL525");

                    b.Property<int?>("Sl526")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL526");

                    b.Property<int?>("Sl527")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL527");

                    b.Property<int?>("Sl528")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL528");

                    b.Property<decimal?>("Sub521")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB521");

                    b.Property<decimal?>("Sub522")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB522");

                    b.Property<decimal?>("Sub523")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB523");

                    b.Property<decimal?>("Sub524")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB524");

                    b.Property<decimal?>("Sub525")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB525");

                    b.Property<decimal?>("Sub526")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB526");

                    b.Property<decimal?>("Sub527")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB527");

                    b.Property<decimal?>("Sub528")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB528");

                    b.ToTable("TAB_LEVEL_52");
                });

            modelBuilder.Entity("ICABAPI.Models.TabLevel61", b =>
                {
                    b.Property<bool?>("Appeared")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("APPEARED");

                    b.Property<long?>("Bar611")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR611");

                    b.Property<long?>("Bar612")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR612");

                    b.Property<long?>("Bar613")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR613");

                    b.Property<long?>("Bar614")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR614");

                    b.Property<long?>("Bar615")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR615");

                    b.Property<long?>("Bar616")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR616");

                    b.Property<long?>("Bar617")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR617");

                    b.Property<long?>("Bar618")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR618");

                    b.Property<bool?>("Completed")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("COMPLETED");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<bool?>("Exempted")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("EXEMPTED");

                    b.Property<string>("G611")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G612")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G613")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G614")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G615")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G616")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G617")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G618")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<byte?>("Passcount")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("PASSCOUNT");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<int?>("Sl611")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL611");

                    b.Property<int?>("Sl612")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL612");

                    b.Property<int?>("Sl613")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL613");

                    b.Property<int?>("Sl614")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL614");

                    b.Property<int?>("Sl615")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL615");

                    b.Property<int?>("Sl616")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL616");

                    b.Property<int?>("Sl617")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL617");

                    b.Property<int?>("Sl618")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL618");

                    b.Property<decimal?>("Sub611")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB611");

                    b.Property<decimal?>("Sub612")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB612");

                    b.Property<decimal?>("Sub613")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB613");

                    b.Property<decimal?>("Sub614")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB614");

                    b.Property<decimal?>("Sub615")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB615");

                    b.Property<decimal?>("Sub616")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB616");

                    b.Property<decimal?>("Sub617")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB617");

                    b.Property<decimal?>("Sub618")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB618");

                    b.ToTable("TAB_LEVEL_61");
                });

            modelBuilder.Entity("ICABAPI.Models.TabLevel62", b =>
                {
                    b.Property<bool?>("Appeared")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("APPEARED");

                    b.Property<long?>("Bar621")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR621");

                    b.Property<long?>("Bar622")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR622");

                    b.Property<long?>("Bar623")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR623");

                    b.Property<long?>("Bar624")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR624");

                    b.Property<long?>("Bar625")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR625");

                    b.Property<long?>("Bar626")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR626");

                    b.Property<long?>("Bar627")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR627");

                    b.Property<long?>("Bar628")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR628");

                    b.Property<bool?>("Completed")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("COMPLETED");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<bool?>("Exempted")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("EXEMPTED");

                    b.Property<string>("G621")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G622")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G623")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G624")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G625")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G626")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G627")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G628")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<byte?>("Passcount")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("PASSCOUNT");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<int?>("Sl621")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL621");

                    b.Property<int?>("Sl622")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL622");

                    b.Property<int?>("Sl623")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL623");

                    b.Property<int?>("Sl624")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL624");

                    b.Property<int?>("Sl625")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL625");

                    b.Property<int?>("Sl626")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL626");

                    b.Property<int?>("Sl627")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL627");

                    b.Property<int?>("Sl628")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL628");

                    b.Property<decimal?>("Sub621")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB621");

                    b.Property<decimal?>("Sub622")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB622");

                    b.Property<decimal?>("Sub623")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB623");

                    b.Property<decimal?>("Sub624")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB624");

                    b.Property<decimal?>("Sub625")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB625");

                    b.Property<decimal?>("Sub626")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB626");

                    b.Property<decimal?>("Sub627")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB627");

                    b.Property<decimal?>("Sub628")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB628");

                    b.ToTable("TAB_LEVEL_62");
                });

            modelBuilder.Entity("ICABAPI.Models.TabLevel63", b =>
                {
                    b.Property<bool?>("Appeared")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("APPEARED");

                    b.Property<long?>("Bar631")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR631");

                    b.Property<long?>("Bar632")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR632");

                    b.Property<long?>("Bar633")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR633");

                    b.Property<long?>("Bar634")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR634");

                    b.Property<long?>("Bar635")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR635");

                    b.Property<long?>("Bar636")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR636");

                    b.Property<long?>("Bar637")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR637");

                    b.Property<long?>("Bar638")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR638");

                    b.Property<bool?>("Completed")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("COMPLETED");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<bool?>("Exempted")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("EXEMPTED");

                    b.Property<string>("G631")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G632")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G633")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G634")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G635")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G636")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G637")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<string>("G638")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)");

                    b.Property<byte?>("Passcount")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("PASSCOUNT");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<int?>("Sl631")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL631");

                    b.Property<int?>("Sl632")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL632");

                    b.Property<int?>("Sl633")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL633");

                    b.Property<int?>("Sl634")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL634");

                    b.Property<int?>("Sl635")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL635");

                    b.Property<int?>("Sl636")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL636");

                    b.Property<int?>("Sl637")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL637");

                    b.Property<int?>("Sl638")
                        .HasPrecision(10)
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("SL638");

                    b.Property<decimal?>("Sub631")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB631");

                    b.Property<decimal?>("Sub632")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB632");

                    b.Property<decimal?>("Sub633")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB633");

                    b.Property<decimal?>("Sub634")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB634");

                    b.Property<decimal?>("Sub635")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB635");

                    b.Property<decimal?>("Sub636")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB636");

                    b.Property<decimal?>("Sub637")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB637");

                    b.Property<decimal?>("Sub638")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("SUB638");

                    b.ToTable("TAB_LEVEL_63");
                });

            modelBuilder.Entity("ICABAPI.Models.TbwebTimeSch", b =>
                {
                    b.Property<DateTime?>("ExamDate")
                        .HasColumnType("DATE")
                        .HasColumnName("EXAM_DATE");

                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<string>("ExamTime1")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(8)")
                        .HasColumnName("EXAM_TIME1");

                    b.Property<string>("ExamTime2")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(8)")
                        .HasColumnName("EXAM_TIME2");

                    b.Property<byte?>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<int?>("Ref")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REF");

                    b.Property<int?>("RefNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REF_NO");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<byte?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<byte?>("SubId")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SUB_ID");

                    b.Property<string>("SubName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("SUB_NAME");

                    b.ToTable("TBWEB_TIME_SCH");
                });

            modelBuilder.Entity("ICABAPI.Models.TempClassAttendance", b =>
                {
                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int?>("SubId")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SUB_ID");

                    b.Property<int?>("RefNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REF_NO");

                    b.HasKey("RegNo", "ExamLevel", "SubId", "RefNo");

                    b.ToTable("TEMP_CLASS_ATTENDANCE");
                });

            modelBuilder.Entity("ICABAPI.Models.TempEarlierPassed61", b =>
                {
                    b.Property<int?>("RegNo")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Ep611")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP611");

                    b.Property<int?>("Ep612")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP612");

                    b.Property<int?>("Ep613")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP613");

                    b.Property<int?>("Ep614")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP614");

                    b.Property<int?>("Ep615")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP615");

                    b.Property<int?>("Ep616")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP616");

                    b.Property<int?>("Ep617")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP617");

                    b.HasKey("RegNo");

                    b.ToTable("TEMP_EARLIER_PASSED_61");
                });

            modelBuilder.Entity("ICABAPI.Models.TempEarlierPassed62", b =>
                {
                    b.Property<int?>("RegNo")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Ep621")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP621");

                    b.Property<int?>("Ep622")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP622");

                    b.Property<int?>("Ep623")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP623");

                    b.Property<int?>("Ep624")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP624");

                    b.Property<int?>("Ep625")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP625");

                    b.Property<int?>("Ep626")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP626");

                    b.Property<int?>("Ep627")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP627");

                    b.HasKey("RegNo");

                    b.ToTable("TEMP_EARLIER_PASSED_62");
                });

            modelBuilder.Entity("ICABAPI.Models.TempEarlierPassed63", b =>
                {
                    b.Property<int?>("RegNo")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Ep631")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP631");

                    b.Property<int?>("Ep632")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP632");

                    b.Property<int?>("Ep633")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("EP633");

                    b.HasKey("RegNo");

                    b.ToTable("TEMP_EARLIER_PASSED_63");
                });

            modelBuilder.Entity("ICABAPI.Models.TempExamReg", b =>
                {
                    b.Property<int>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<int>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<int>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<int>("ExamcenId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("EXAMCEN_ID");

                    b.Property<decimal?>("Annfeepayslipamt")
                        .HasColumnType("NUMBER")
                        .HasColumnName("ANNFEEPAYSLIPAMT");

                    b.Property<string>("Annfeepayslipbank")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("ANNFEEPAYSLIPBANK");

                    b.Property<string>("Annfeepayslipbr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("ANNFEEPAYSLIPBR");

                    b.Property<DateTime?>("Annfeepayslipdate")
                        .HasColumnType("DATE")
                        .HasColumnName("ANNFEEPAYSLIPDATE");

                    b.Property<string>("Annfeepayslipno")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("ANNFEEPAYSLIPNO");

                    b.Property<byte[]>("AnnfeeuploadPayslip")
                        .HasColumnType("BLOB")
                        .HasColumnName("ANNFEEUPLOAD_PAYSLIP");

                    b.Property<string>("AttenAttached")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1)")
                        .HasColumnName("ATTEN_ATTACHED");

                    b.Property<string>("CcEnrno")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(20)")
                        .HasColumnName("CC_ENRNO");

                    b.Property<string>("CcSession")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(4)")
                        .HasColumnName("CC_SESSION");

                    b.Property<int?>("EntryType")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("ENTRY_TYPE");

                    b.Property<string>("Entryuser")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("ENTRYUSER");

                    b.Property<int>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<decimal?>("Exfeepayslipamt")
                        .HasColumnType("NUMBER")
                        .HasColumnName("EXFEEPAYSLIPAMT");

                    b.Property<string>("Exfeepayslipbank")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("EXFEEPAYSLIPBANK");

                    b.Property<string>("Exfeepayslipbr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(100)")
                        .HasColumnName("EXFEEPAYSLIPBR");

                    b.Property<DateTime?>("Exfeepayslipdate")
                        .HasColumnType("DATE")
                        .HasColumnName("EXFEEPAYSLIPDATE");

                    b.Property<string>("Exfeepayslipno")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("EXFEEPAYSLIPNO");

                    b.Property<byte[]>("ExfeeuploadPayslip")
                        .HasColumnType("BLOB")
                        .HasColumnName("EXFEEUPLOAD_PAYSLIP");

                    b.Property<decimal?>("Fapprove")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER")
                        .HasColumnName("FAPPROVE")
                        .HasDefaultValueSql("0");

                    b.Property<byte[]>("FileAttenAttached")
                        .HasColumnType("BLOB")
                        .HasColumnName("FILE_ATTEN_ATTACHED");

                    b.Property<byte[]>("FileFitnessAttached")
                        .HasColumnType("BLOB")
                        .HasColumnName("FILE_FITNESS_ATTACHED");

                    b.Property<byte[]>("FileTrainingAttached")
                        .HasColumnType("BLOB")
                        .HasColumnName("FILE_TRAINING_ATTACHED");

                    b.Property<DateTime?>("FillupDate")
                        .HasColumnType("DATE")
                        .HasColumnName("FILLUP_DATE");

                    b.Property<string>("FitnessAttached")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1)")
                        .HasColumnName("FITNESS_ATTACHED");

                    b.Property<string>("FormNo")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(9)")
                        .HasColumnName("FORM_NO");

                    b.Property<decimal?>("Formsubmitstatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER")
                        .HasColumnName("FORMSUBMITSTATUS")
                        .HasDefaultValueSql("0");

                    b.Property<int?>("LastAppearedExamlevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("LAST_APPEARED_EXAMLEVEL");

                    b.Property<int?>("LastAppearedMonthid")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("LAST_APPEARED_MONTHID");

                    b.Property<int?>("LastAppearedRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("LAST_APPEARED_ROLLNO");

                    b.Property<int?>("LastAppearedYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("LAST_APPEARED_YEAR");

                    b.Property<int?>("MaintbRef")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("MAINTB_REF");

                    b.Property<string>("ReasonInvalid")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(200)")
                        .HasColumnName("REASON_INVALID");

                    b.Property<int>("Ref")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REF");

                    b.Property<int?>("StudType")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("STUD_TYPE");

                    b.Property<string>("TrainingAttached")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1)")
                        .HasColumnName("TRAINING_ATTACHED");

                    b.Property<DateTime?>("TrainingEnd")
                        .HasColumnType("DATE")
                        .HasColumnName("TRAINING_END");

                    b.Property<DateTime?>("TrainingSt")
                        .HasColumnType("DATE")
                        .HasColumnName("TRAINING_ST");

                    b.Property<int?>("Validity")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("VALIDITY");

                    b.HasKey("RegNo", "ExamLevel", "MonthId", "SessionYear", "ExamcenId");

                    b.ToTable("TEMP_EXAM_REG");
                });

            modelBuilder.Entity("ICABAPI.Models.TempExamRegPassed", b =>
                {
                    b.Property<int?>("ExamSl")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("EXAM_SL");

                    b.Property<int?>("RefNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REF_NO");

                    b.Property<string>("ExamNamePassed")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(70)")
                        .HasColumnName("EXAM_NAME_PASSED");

                    b.Property<string>("ExamcenPassed")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("EXAMCEN_PASSED");

                    b.Property<int?>("RollnoPassed")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("ROLLNO_PASSED");

                    b.Property<string>("SessionPassed")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(20)")
                        .HasColumnName("SESSION_PASSED");

                    b.Property<int?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<int?>("StuRegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("STU_REG_NO");

                    b.HasKey("ExamSl", "RefNo");

                    b.ToTable("TEMP_EXAM_REG_PASSED");
                });

            modelBuilder.Entity("ICABAPI.Models.TempExemptedSub", b =>
                {
                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int?>("SubId")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SUB_ID");

                    b.Property<int?>("Ref")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REF");

                    b.HasKey("RegNo", "ExamLevel", "SubId", "Ref");

                    b.ToTable("TEMP_EXEMPTED_SUB");
                });

            modelBuilder.Entity("ICABAPI.Models.TempRegSubject", b =>
                {
                    b.Property<int>("RefNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REF_NO");

                    b.Property<int>("SubId")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SUB_ID");

                    b.Property<int>("EntryType")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("ENTRY_TYPE");

                    b.HasKey("RefNo", "SubId");

                    b.ToTable("TEMP_REG_SUBJECT");
                });

            modelBuilder.Entity("ICABAPI.Models.TimeSch", b =>
                {
                    b.Property<DateTime?>("ExamDate")
                        .HasColumnType("DATE")
                        .HasColumnName("EXAM_DATE");

                    b.Property<byte?>("ExamLevel")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<string>("ExamTime1")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(8)")
                        .HasColumnName("EXAM_TIME1");

                    b.Property<string>("ExamTime2")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(8)")
                        .HasColumnName("EXAM_TIME2");

                    b.Property<byte?>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<int?>("RefNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REF_NO");

                    b.Property<byte?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<byte?>("SubId")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SUB_ID");

                    b.Property<string>("SubName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("SUB_NAME");

                    b.ToView("TIME_SCH");
                });

            modelBuilder.Entity("ICABAPI.Models.UserSubMenu", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<int>("SubMenuId")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("MainMenuId")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("SUBMENUNAME")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("ApplicationUserId", "SubMenuId");

                    b.HasIndex("MainMenuId");

                    b.HasIndex("SubMenuId");

                    b.ToTable("USERSUBMENU");
                });

            modelBuilder.Entity("ICABAPI.Models.Usersec", b =>
                {
                    b.Property<string>("Mainmenu")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(60)")
                        .HasColumnName("MAINMENU");

                    b.Property<string>("Menuname")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(40)")
                        .HasColumnName("MENUNAME");

                    b.Property<string>("Userid")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(20)")
                        .HasColumnName("USERID");

                    b.ToTable("USERSEC");
                });

            modelBuilder.Entity("ICABAPI.Models.VwAbsent", b =>
                {
                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<byte?>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<byte?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<byte?>("SubId")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SUB_ID");

                    b.ToView("VW_ABSENT");
                });

            modelBuilder.Entity("ICABAPI.Models.VwBarAlloted", b =>
                {
                    b.Property<long?>("BarCode")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR_CODE");

                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<byte?>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<byte?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<byte?>("SubId")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SUB_ID");

                    b.Property<int?>("UdSlno")
                        .HasPrecision(6)
                        .HasColumnType("NUMBER(6)")
                        .HasColumnName("UD_SLNO");

                    b.ToView("VW_BAR_ALLOTED");
                });

            modelBuilder.Entity("ICABAPI.Models.VwExamReg", b =>
                {
                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<byte?>("ExamcenId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("EXAMCEN_ID");

                    b.Property<byte?>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<byte?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<byte?>("SubId")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SUB_ID");

                    b.ToView("VW_EXAM_REG");
                });

            modelBuilder.Entity("ICABAPI.Models.VwExempsub23", b =>
                {
                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<string>("ExemptedSubname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("EXEMPTED_SUBNAME");

                    b.Property<int?>("Ref")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REF");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<byte?>("SubId")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SUB_ID");

                    b.ToView("VW_EXEMPSUB23");
                });

            modelBuilder.Entity("ICABAPI.Models.VwExemptedSub", b =>
                {
                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<string>("ExemptedSubname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("EXEMPTED_SUBNAME");

                    b.Property<int?>("Ref")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REF");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<byte?>("SubId")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SUB_ID");

                    b.ToView("VW_EXEMPTED_SUB");
                });

            modelBuilder.Entity("ICABAPI.Models.VwMarksfinal", b =>
                {
                    b.Property<long?>("BarCode")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR_CODE");

                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<short?>("Examiner")
                        .HasPrecision(5)
                        .HasColumnType("NUMBER(5)")
                        .HasColumnName("EXAMINER");

                    b.Property<string>("Grade")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)")
                        .HasColumnName("GRADE");

                    b.Property<decimal?>("Marks")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("MARKS");

                    b.Property<byte?>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<decimal?>("Outmarks")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("OUTMARKS");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<short?>("Scriptsl")
                        .HasPrecision(5)
                        .HasColumnType("NUMBER(5)")
                        .HasColumnName("SCRIPTSL");

                    b.Property<byte?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<int?>("SubId")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("SUB_ID");

                    b.ToView("VW_MARKSFINAL");
                });

            modelBuilder.Entity("ICABAPI.Models.VwMouSuccessList", b =>
                {
                    b.ToView("VW_MOU_SUCCESS_LIST");
                });

            modelBuilder.Entity("ICABAPI.Models.VwPrincipal", b =>
                {
                    b.Property<DateTime?>("DateEnr")
                        .HasColumnType("DATE")
                        .HasColumnName("DATE_ENR");

                    b.Property<int?>("FId")
                        .HasPrecision(6)
                        .HasColumnType("NUMBER(6)")
                        .HasColumnName("F_ID");

                    b.Property<int?>("MemId")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("MEM_ID");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("NAME");

                    b.ToView("VW_PRINCIPAL");
                });

            modelBuilder.Entity("ICABAPI.Models.VwRollAlloted", b =>
                {
                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<string>("FName")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(70)")
                        .HasColumnName("F_NAME");

                    b.Property<string>("FormNo")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(9)")
                        .HasColumnName("FORM_NO");

                    b.Property<string>("MName")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(70)")
                        .HasColumnName("M_NAME");

                    b.Property<byte?>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(150)")
                        .HasColumnName("NAME");

                    b.Property<int?>("Ref")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REF");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<byte?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<byte?>("StudType")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("STUD_TYPE");

                    b.ToView("VW_ROLL_ALLOTED");
                });

            modelBuilder.Entity("ICABAPI.Models.VwSearch", b =>
                {
                    b.Property<long?>("BarCode")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR_CODE");

                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<string>("FName")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(70)")
                        .HasColumnName("F_NAME");

                    b.Property<string>("MName")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(70)")
                        .HasColumnName("M_NAME");

                    b.Property<byte?>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(150)")
                        .HasColumnName("NAME");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<byte?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<int?>("SubId")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("SUB_ID");

                    b.ToView("VW_SEARCH");
                });

            modelBuilder.Entity("ICABAPI.Models.VwSessionPassCount", b =>
                {
                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<byte?>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<decimal?>("NoFailSub")
                        .HasColumnType("NUMBER")
                        .HasColumnName("NO_FAIL_SUB");

                    b.Property<decimal?>("NoPassSub")
                        .HasColumnType("NUMBER")
                        .HasColumnName("NO_PASS_SUB");

                    b.Property<decimal?>("NoSubApp")
                        .HasColumnType("NUMBER")
                        .HasColumnName("NO_SUB_APP");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<byte?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.ToView("VW_SESSION_PASS_COUNT");
                });

            modelBuilder.Entity("ICABAPI.Models.VwSessionPassCountBack", b =>
                {
                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<byte?>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<decimal?>("NoFailSub")
                        .HasColumnType("NUMBER")
                        .HasColumnName("NO_FAIL_SUB");

                    b.Property<decimal?>("NoPassSub")
                        .HasColumnType("NUMBER")
                        .HasColumnName("NO_PASS_SUB");

                    b.Property<decimal?>("NoSubApp")
                        .HasColumnType("NUMBER")
                        .HasColumnName("NO_SUB_APP");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<byte?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.ToView("VW_SESSION_PASS_COUNT_BACK");
                });

            modelBuilder.Entity("ICABAPI.Models.VwStuReg", b =>
                {
                    b.Property<string>("BoardUni")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("BOARD_UNI");

                    b.Property<string>("Cell")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("CELL");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("DATE")
                        .HasColumnName("DOB");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("ExamName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(20)")
                        .HasColumnName("EXAM_NAME");

                    b.Property<int?>("FId")
                        .HasPrecision(6)
                        .HasColumnType("NUMBER(6)")
                        .HasColumnName("F_ID");

                    b.Property<string>("FName")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(70)")
                        .HasColumnName("F_NAME");

                    b.Property<string>("Fax")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(30)")
                        .HasColumnName("FAX");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(1)")
                        .HasColumnName("GENDER");

                    b.Property<string>("Imagepath")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(200)")
                        .HasColumnName("IMAGEPATH");

                    b.Property<string>("MName")
                        .HasMaxLength(70)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(70)")
                        .HasColumnName("M_NAME");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(150)")
                        .HasColumnName("NAME");

                    b.Property<string>("NationalId")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(15)")
                        .HasColumnName("NATIONAL_ID");

                    b.Property<string>("Nationality")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(15)")
                        .HasColumnName("NATIONALITY");

                    b.Property<byte?>("PassYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("PASS_YEAR");

                    b.Property<string>("PerAdd")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(300)")
                        .HasColumnName("PER_ADD");

                    b.Property<DateTime?>("PeriodFrom")
                        .HasColumnType("DATE")
                        .HasColumnName("PERIOD_FROM");

                    b.Property<DateTime?>("PeriodTo")
                        .HasColumnType("DATE")
                        .HasColumnName("PERIOD_TO");

                    b.Property<string>("Ph")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("PH");

                    b.Property<string>("PreAdd")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(300)")
                        .HasColumnName("PRE_ADD");

                    b.Property<int?>("PrinEnrNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("PRIN_ENR_NO");

                    b.Property<DateTime?>("RegDate")
                        .HasColumnType("DATE")
                        .HasColumnName("REG_DATE");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<byte?>("RegYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("REG_YEAR");

                    b.Property<string>("Religion")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("RELIGION");

                    b.Property<bool?>("ResultDiv")
                        .HasPrecision(1)
                        .HasColumnType("NUMBER(1)")
                        .HasColumnName("RESULT_DIV");

                    b.Property<decimal?>("ResultGpa")
                        .HasColumnType("NUMBER(3,2)")
                        .HasColumnName("RESULT_GPA");

                    b.Property<string>("ResultProf")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(10)")
                        .HasColumnName("RESULT_PROF");

                    b.ToView("VW_STU_REG");
                });

            modelBuilder.Entity("ICABAPI.Models.VwTabulation", b =>
                {
                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int?>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<int?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<int?>("SubId")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("SUB_ID");

                    b.Property<int?>("BarCode")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR_CODE");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<string>("Grade")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)")
                        .HasColumnName("GRADE");

                    b.Property<decimal?>("Marks")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("MARKS");

                    b.HasKey("ExamLevel", "MonthId", "SessionYear", "RegNo", "SubId");

                    b.ToView("VW_TABULATION");
                });

            modelBuilder.Entity("ICABAPI.Models.VwUnsuccessList", b =>
                {
                    b.Property<long?>("BarCode")
                        .HasPrecision(15)
                        .HasColumnType("NUMBER(15)")
                        .HasColumnName("BAR_CODE");

                    b.Property<int?>("ExamLevel")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<int?>("ExamRollno")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<short?>("Examiner")
                        .HasPrecision(5)
                        .HasColumnType("NUMBER(5)")
                        .HasColumnName("EXAMINER");

                    b.Property<string>("Grade")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)")
                        .HasColumnName("GRADE");

                    b.Property<decimal?>("Marks")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("MARKS");

                    b.Property<byte?>("MonthId")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("MONTH_ID");

                    b.Property<decimal?>("Outmarks")
                        .HasColumnType("NUMBER(5,2)")
                        .HasColumnName("OUTMARKS");

                    b.Property<int?>("RegNo")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("REG_NO");

                    b.Property<short?>("Scriptsl")
                        .HasPrecision(5)
                        .HasColumnType("NUMBER(5)")
                        .HasColumnName("SCRIPTSL");

                    b.Property<byte?>("SessionYear")
                        .HasPrecision(4)
                        .HasColumnType("NUMBER(4)")
                        .HasColumnName("SESSION_YEAR");

                    b.Property<int?>("SubId")
                        .HasPrecision(8)
                        .HasColumnType("NUMBER(8)")
                        .HasColumnName("SUB_ID");

                    b.ToView("VW_UNSUCCESS_LIST");
                });

            modelBuilder.Entity("ICABAPI.Models.WebResult", b =>
                {
                    b.Property<decimal?>("Completed")
                        .HasColumnType("NUMBER")
                        .HasColumnName("COMPLETED");

                    b.Property<decimal?>("ExamLevel")
                        .HasColumnType("NUMBER")
                        .HasColumnName("EXAM_LEVEL");

                    b.Property<string>("ExamLevelName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(50)")
                        .HasColumnName("EXAM_LEVEL_NAME");

                    b.Property<decimal?>("ExamRollno")
                        .HasColumnType("NUMBER")
                        .HasColumnName("EXAM_ROLLNO");

                    b.Property<decimal?>("ExamSession")
                        .HasColumnType("NUMBER")
                        .HasColumnName("EXAM_SESSION");

                    b.Property<string>("ExamSessionName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(20)")
                        .HasColumnName("EXAM_SESSION_NAME");

                    b.Property<decimal?>("ExamYear")
                        .HasColumnType("NUMBER")
                        .HasColumnName("EXAM_YEAR");

                    b.Property<string>("FName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(150)")
                        .HasColumnName("F_NAME");

                    b.Property<string>("Fname1")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(150)")
                        .HasColumnName("FNAME");

                    b.Property<string>("MName")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(150)")
                        .HasColumnName("M_NAME");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(150)")
                        .HasColumnName("NAME");

                    b.Property<decimal?>("PassStatus")
                        .HasColumnType("NUMBER")
                        .HasColumnName("PASS_STATUS");

                    b.Property<decimal?>("RegNo")
                        .HasColumnType("NUMBER")
                        .HasColumnName("REG_NO");

                    b.Property<string>("Sub1Grd")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)")
                        .HasColumnName("SUB1_GRD");

                    b.Property<string>("Sub2Grd")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)")
                        .HasColumnName("SUB2_GRD");

                    b.Property<string>("Sub3Grd")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)")
                        .HasColumnName("SUB3_GRD");

                    b.Property<string>("Sub4Grd")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)")
                        .HasColumnName("SUB4_GRD");

                    b.Property<string>("Sub5Grd")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)")
                        .HasColumnName("SUB5_GRD");

                    b.Property<string>("Sub6Grd")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)")
                        .HasColumnName("SUB6_GRD");

                    b.Property<string>("Sub7Grd")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)")
                        .HasColumnName("SUB7_GRD");

                    b.Property<string>("Sub8Grd")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(2)")
                        .HasColumnName("SUB8_GRD");

                    b.ToTable("WEB_RESULT");
                });

            modelBuilder.Entity("ICABAPI.Models.Yearinfo", b =>
                {
                    b.Property<byte>("Yearcode")
                        .HasPrecision(2)
                        .HasColumnType("NUMBER(2)")
                        .HasColumnName("YEARCODE");

                    b.Property<string>("AnotherDescription")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Description")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(30)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<DateTime?>("Enddate")
                        .HasColumnType("DATE")
                        .HasColumnName("ENDDATE");

                    b.Property<string>("Openingfield")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("VARCHAR2(20)")
                        .HasColumnName("OPENINGFIELD");

                    b.Property<DateTime?>("Startdate")
                        .HasColumnType("DATE")
                        .HasColumnName("STARTDATE");

                    b.HasKey("Yearcode")
                        .HasName("YEARINFO_PK");

                    b.ToTable("YEARINFO");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("\"NormalizedName\" IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("Name")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("Value")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("ICABAPI.Models.AppUser", b =>
                {
                    b.OwnsMany("ICABAPI.Models.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<int>("AppUserId")
                                .HasColumnType("NUMBER(10)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("NUMBER(10)")
                                .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                            b1.Property<DateTime>("Created")
                                .HasColumnType("TIMESTAMP(7)");

                            b1.Property<string>("CreatedByIp")
                                .HasColumnType("NVARCHAR2(2000)");

                            b1.Property<DateTime>("Expires")
                                .HasColumnType("TIMESTAMP(7)");

                            b1.Property<string>("ReplacedByToken")
                                .HasColumnType("NVARCHAR2(2000)");

                            b1.Property<DateTime?>("Revoked")
                                .HasColumnType("TIMESTAMP(7)");

                            b1.Property<string>("RevokedByIp")
                                .HasColumnType("NVARCHAR2(2000)");

                            b1.Property<string>("Token")
                                .HasColumnType("NVARCHAR2(2000)");

                            b1.HasKey("AppUserId", "Id");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("AppUserId");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("ICABAPI.Models.CPLCourse", b =>
                {
                    b.HasOne("ICABAPI.Models.CPLSubject", "CPLSubject")
                        .WithMany("CPLCourse")
                        .HasForeignKey("CPLSubjectSUBJECTID");

                    b.Navigation("CPLSubject");
                });

            modelBuilder.Entity("ICABAPI.Models.CPLDepartment", b =>
                {
                    b.HasOne("ICABAPI.Models.CPLSubject", "CPLSUBJECT")
                        .WithOne("CPLDEPARTMENT")
                        .HasForeignKey("ICABAPI.Models.CPLDepartment", "SUBJECTID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CPLSUBJECT");
                });

            modelBuilder.Entity("ICABAPI.Models.CPLUniversity", b =>
                {
                    b.HasOne("ICABAPI.Models.CPLSubject", "CPLSubject")
                        .WithOne("CPLUniversity")
                        .HasForeignKey("ICABAPI.Models.CPLUniversity", "SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CPLSubject");
                });

            modelBuilder.Entity("ICABAPI.Models.CplStudentFile", b =>
                {
                    b.HasOne("ICABAPI.Models.SetExmpMou", "SetExmpMou")
                        .WithMany("Fies")
                        .HasForeignKey("SetExmpMouId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SetExmpMou");
                });

            modelBuilder.Entity("ICABAPI.Models.Cpl_Models.ExCourse", b =>
                {
                    b.HasOne("ICABAPI.Models.Cpl_Models.ExICABSubject", "EXICABSUBJECT")
                        .WithMany("EXCOURSES")
                        .HasForeignKey("EXICABSUBJECTID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EXICABSUBJECT");
                });

            modelBuilder.Entity("ICABAPI.Models.Cpl_Models.ExDepartment", b =>
                {
                    b.HasOne("ICABAPI.Models.Cpl_Models.ExUniversity", "EXUNIVERSITY")
                        .WithMany("EXDEPARTMENTS")
                        .HasForeignKey("EXUNIVERSITYID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EXUNIVERSITY");
                });

            modelBuilder.Entity("ICABAPI.Models.Cpl_Models.ExICABSubject", b =>
                {
                    b.HasOne("ICABAPI.Models.Cpl_Models.ExDepartment", "EXDEPARTMENT")
                        .WithMany("EXICABSUBJECTS")
                        .HasForeignKey("EXDEPARTMENTID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EXDEPARTMENT");
                });

            modelBuilder.Entity("ICABAPI.Models.Cpl_Models.ExUniversity", b =>
                {
                    b.HasOne("ICABAPI.Models.Cpl_Models.ExExamLevel", "ExExamLevel")
                        .WithMany("ExUniversities")
                        .HasForeignKey("EXEXAMLEVELID");

                    b.Navigation("ExExamLevel");
                });

            modelBuilder.Entity("ICABAPI.Models.Cpls_Student_Models.StudentCourse", b =>
                {
                    b.HasOne("ICABAPI.Models.Cpls_Student_Models.StudentICABSubject", "STUDENTICABSUBJECT")
                        .WithMany("STUDENTCOURSES")
                        .HasForeignKey("STUDENTICABSUBJECTID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("STUDENTICABSUBJECT");
                });

            modelBuilder.Entity("ICABAPI.Models.Cpls_Student_Models.StudentExamLevel", b =>
                {
                    b.HasOne("ICABAPI.Models.Cpls_Student_Models.StudentReg", "STUDENTREG")
                        .WithMany("EXAMLEVELS")
                        .HasForeignKey("STUDENTREGID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("STUDENTREG");
                });

            modelBuilder.Entity("ICABAPI.Models.Cpls_Student_Models.StudentICABSubject", b =>
                {
                    b.HasOne("ICABAPI.Models.Cpls_Student_Models.StudentExamLevel", "STUDENTEXAMLEVEL")
                        .WithMany("STUDENTICABSUBJECTS")
                        .HasForeignKey("STUDENTEXAMLEVELID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("STUDENTEXAMLEVEL");
                });

            modelBuilder.Entity("ICABAPI.Models.Cpls_Student_Models.StudentReg", b =>
                {
                    b.HasOne("ICABAPI.Models.Cpl_Models.ExDepartment", "DEPARTMENT")
                        .WithMany()
                        .HasForeignKey("DEPARTMENTID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICABAPI.Models.Cpl_Models.ExUniversity", "UNIVERSITY")
                        .WithMany()
                        .HasForeignKey("EXUNIVERSITYID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DEPARTMENT");

                    b.Navigation("UNIVERSITY");
                });

            modelBuilder.Entity("ICABAPI.Models.FirmMas2", b =>
                {
                    b.HasOne("ICABAPI.Models.FirmMas1", "FirmMas1")
                        .WithMany("FirmMas2s")
                        .HasForeignKey("FirmMas1Id");

                    b.Navigation("FirmMas1");
                });

            modelBuilder.Entity("ICABAPI.Models.ProPartner", b =>
                {
                    b.HasOne("ICABAPI.Models.FirmMas1", null)
                        .WithMany("ProPartners")
                        .HasForeignKey("FirmMas1Id");
                });

            modelBuilder.Entity("ICABAPI.Models.SubMenu", b =>
                {
                    b.HasOne("ICABAPI.Models.MainMenu", "MainMenu")
                        .WithMany("SubMenus")
                        .HasForeignKey("MAINMENUID");

                    b.Navigation("MainMenu");
                });

            modelBuilder.Entity("ICABAPI.Models.UserSubMenu", b =>
                {
                    b.HasOne("ICABAPI.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserSubMenus")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICABAPI.Models.MainMenu", "MainMenu")
                        .WithMany("UserSubMenus")
                        .HasForeignKey("MainMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICABAPI.Models.SubMenu", "SubMenu")
                        .WithMany("UserSubMenus")
                        .HasForeignKey("SubMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("MainMenu");

                    b.Navigation("SubMenu");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ICABAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ICABAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICABAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ICABAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ICABAPI.Models.ApplicationUser", b =>
                {
                    b.Navigation("UserSubMenus");
                });

            modelBuilder.Entity("ICABAPI.Models.CPLSubject", b =>
                {
                    b.Navigation("CPLCourse");

                    b.Navigation("CPLDEPARTMENT");

                    b.Navigation("CPLUniversity");
                });

            modelBuilder.Entity("ICABAPI.Models.Cpl_Models.ExDepartment", b =>
                {
                    b.Navigation("EXICABSUBJECTS");
                });

            modelBuilder.Entity("ICABAPI.Models.Cpl_Models.ExExamLevel", b =>
                {
                    b.Navigation("ExUniversities");
                });

            modelBuilder.Entity("ICABAPI.Models.Cpl_Models.ExICABSubject", b =>
                {
                    b.Navigation("EXCOURSES");
                });

            modelBuilder.Entity("ICABAPI.Models.Cpl_Models.ExUniversity", b =>
                {
                    b.Navigation("EXDEPARTMENTS");
                });

            modelBuilder.Entity("ICABAPI.Models.Cpls_Student_Models.StudentExamLevel", b =>
                {
                    b.Navigation("STUDENTICABSUBJECTS");
                });

            modelBuilder.Entity("ICABAPI.Models.Cpls_Student_Models.StudentICABSubject", b =>
                {
                    b.Navigation("STUDENTCOURSES");
                });

            modelBuilder.Entity("ICABAPI.Models.Cpls_Student_Models.StudentReg", b =>
                {
                    b.Navigation("EXAMLEVELS");
                });

            modelBuilder.Entity("ICABAPI.Models.FirmMas1", b =>
                {
                    b.Navigation("FirmMas2s");

                    b.Navigation("ProPartners");
                });

            modelBuilder.Entity("ICABAPI.Models.MainMenu", b =>
                {
                    b.Navigation("SubMenus");

                    b.Navigation("UserSubMenus");
                });

            modelBuilder.Entity("ICABAPI.Models.SetExmpMou", b =>
                {
                    b.Navigation("Fies");
                });

            modelBuilder.Entity("ICABAPI.Models.SubMenu", b =>
                {
                    b.Navigation("UserSubMenus");
                });
#pragma warning restore 612, 618
        }
    }
}
